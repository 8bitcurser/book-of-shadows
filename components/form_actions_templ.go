// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "book-of-shadows/models"

func FormActions(inv *models.Investigator) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"col-12 mt-4 text-center\"><button id=\"next-step-button\" type=\"submit\" class=\"btn btn-primary btn-lg px-4 py-2 d-flex align-items-center justify-content-center mx-auto\" style=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templruntime.SanitizeStyleAttributeValues(getButtonStyle(inv))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/form_actions.templ`, Line: 11, Col: 38}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" onclick=\"handleFormSubmission(event)\"><span>Continue to Attributes</span> <i class=\"bi bi-arrow-right ms-2\"></i></button></div><script>\n        function handleFormSubmission(event) {\n            event.preventDefault();\n            \n            const form = event.target.closest('form');\n            const formData = new FormData(form);\n            const button = event.target;\n            \n            // Convert FormData to JSON object\n            const jsonData = {};\n            for (let [key, value] of formData.entries()) {\n                jsonData[key] = value;\n            }\n            \n            // Disable button during submission\n            button.disabled = true;\n            button.innerHTML = '<span class=\"spinner-border spinner-border-sm me-2\"></span>Processing...';\n            \n            fetch(form.action, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(jsonData)\n            })\n            .then(response => {\n                if (response.status === 201) {\n                    return response.json();\n                } else {\n                    throw new Error('Form submission failed');\n                }\n            })\n            .then(data => {\n                if (data.Key) {\n                    // Navigate to wizard/attributes/{key}\n                    window.location.href = `/wizard/attributes/${data.Key}`;\n                } else {\n                    throw new Error('No Key returned from server');\n                }\n            })\n            .catch(error => {\n                console.error('Error:', error);\n                // Re-enable button and reset text\n                button.disabled = false;\n                button.innerHTML = '<span>Continue to Attributes</span><i class=\"bi bi-arrow-right ms-2\"></i>';\n                alert('An error occurred while processing your request. Please try again.');\n            });\n        }\n    </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func getButtonStyle(inv *models.Investigator) string {
	if inv != nil && (inv.Archetype.Name != "" && inv.Occupation.Name != "") {
		return "background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); border: none; min-width: 240px;"
	} else {
		return "background: #e5e5e5; border: none; min-width: 240px;"
	}
}

var _ = templruntime.GeneratedTemplate
