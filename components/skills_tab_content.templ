package components

import (
    "book-of-shadows/models"
    "sort"
)

templ ArchetypeSkillsTab(investigator *models.Investigator) {
    <div class="tab-pane fade show active" id="archetype-skills" role="tabpanel" aria-labelledby="archetype-tab">
        @PointsDisplay("Archetype Skills", investigator.ArchetypePoints, "archetype-points")

        <div class="mb-4">
            <div class="row g-3">
                <!-- Archetype Skills (Alphabetically Sorted) -->
                @renderSkills(investigator, investigator.Archetype.Skills, "archetype")
            </div>
        </div>

        @ArchetypeTabActions(investigator.ID)
    </div>
}

templ OccupationSkillsTab(investigator *models.Investigator) {
    <div class="tab-pane fade" id="occupation-skills" role="tabpanel" aria-labelledby="occupation-tab">
        @PointsDisplay("Occupation Skills", investigator.OccupationPoints, "occupation-points")

        <div class="mb-4">
            <div class="row g-3">
                <!-- Occupation Skills (Alphabetically Sorted) -->
                @renderSkills(investigator, *investigator.GetOccupationSkills(), "occupation")
            </div>
        </div>

        @OccupationTabActions()
    </div>
}

templ GeneralSkillsTab(investigator *models.Investigator) {
    <div class="tab-pane fade" id="general-skills" role="tabpanel" aria-labelledby="general-tab">
        @PointsDisplay("General Skills", investigator.FreePoints, "general-points")

        <div class="mb-4">
            <div class="row g-3">
                <!-- General Skills (Alphabetically Sorted) -->
                @renderGeneralSkills(investigator)
            </div>
        </div>

        @GeneralTabActions(investigator.ID)
    </div>
}

templ renderSkills(investigator *models.Investigator, skills []string, skillType string) {
    for _, skillName := range getSortedSkillNames(investigator, skills) {
        @SkillBox(investigator.Skills[skillName], skillType)
    }
}

templ renderGeneralSkills(investigator *models.Investigator) {
    for _, skillObj := range getSortedSkills(investigator) {
        @SkillBox(skillObj, "general")
    }
}

func getSortedSkillNames(investigator *models.Investigator, skills []string) []string {
    // Create a slice to hold valid skills
    var validSkills []string
    
    // Add skills to the valid skills slice
    for _, skillName := range skills {
        skillObj := investigator.Skills[skillName]
        if skillObj.Name != "" && skillObj.Name != "Dodge_Copy" && skillObj.Base == 0 {
            validSkills = append(validSkills, skillName)
        }
    }
    
    // Sort skills alphabetically by name
    sort.Slice(validSkills, func(i, j int) bool {
        return investigator.Skills[validSkills[i]].Name < investigator.Skills[validSkills[j]].Name
    })
    
    return validSkills
}

func getSortedSkills(investigator *models.Investigator) []models.Skill {
    // Create a slice to hold valid skills
    var validSkills []models.Skill
    
    // Add skills to the valid skills slice
    for _, skill := range investigator.Skills {
        if skill.Name != "" && skill.Name != "Dodge_Copy" && skill.Base == 0 {
            validSkills = append(validSkills, skill)
        }
    }
    
    // Sort skills alphabetically by name
    sort.Slice(validSkills, func(i, j int) bool {
        return validSkills[i].Name < validSkills[j].Name
    })
    
    return validSkills
}