package components

import (
    "book-of-shadows/models"
    "strconv"
    "sort"
)

templ SkillsSection(inv *models.Investigator) {
    <div class="card shadow-sm mb-4" style="border-radius: 1rem; border: none;">
        <div class="card-header d-flex align-items-center p-3 card-header-custom">
            <i class="bi bi-tools me-2 card-header-icon"></i>
            <h4 class="section-title">Skills</h4>
            <div class="ms-auto skill-points">
                <span class="badge rounded-pill me-1 skill-badge">
                    <i class="bi bi-briefcase-fill me-1"></i>Occupation: {strconv.Itoa(inv.OccupationPoints)}
                </span>
                <span class="badge rounded-pill me-1 skill-badge">
                    <i class="bi bi-book-fill me-1"></i>Interest: {strconv.Itoa(inv.FreePoints)}
                </span>
                if inv.ArchetypePoints > 0 {
                    <span class="badge rounded-pill skill-badge">
                        <i class="bi bi-person-fill me-1"></i>Archetype: {strconv.Itoa(inv.ArchetypePoints)}
                    </span>
                }
            </div>
        </div>
        <div class="card-body p-3">
            <div class="skills-grid">
                for _, skill := range sortSkillsByPriority(inv.Skills) {
                    if skill.Name != "" && skill.Name != "Dodge_Copy" && skill.Base == 0 {
                        @SkillItem(skill)
                    }
                }
            </div>
        </div>
    </div>
}

templ SkillItem(skill models.Skill) {
    <div class="skill-item p-2 mb-2 rounded shadow-sm" data-priority={strconv.FormatBool(skill.IsPriority)}>
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center skill-name-container">
                <!-- Pin Toggle Button -->
                <div class="pin-toggle me-2 flex-shrink-0">
                    <button 
                        type="button"
                        class="btn btn-link p-0 pin-btn editable"
                        data-skill={skill.Name}
                        data-pinned={strconv.FormatBool(skill.IsPriority)}
                        onclick="characterUtils.togglePinSkill(this)"
                        style="line-height: 1; color: #B0B0B0; width: 1.3em; height: 1.3em;"
                    >
                        if skill.IsPriority {
                            <i class="bi bi-pin-fill"></i>
                        } else {
                            <i class="bi bi-pin"></i>
                        }
                    </button>
                </div>
                <div class="form-check me-1 flex-shrink-0">
                    <input
                        type="checkbox"
                        class="form-check-input editable"
                        data-skill={skill.Name}
                        if skill.IsSelected {
                            checked
                        }
                        onchange="characterUtils.handleSkillToggleCheck(this)"
                        style="cursor: pointer; width: 1.1em; height: 1.1em;"
                    />
                </div>
                
                if skill.NeedsFormDef == 1 {
                    <input
                        type="text"
                        class="form-control form-control-sm editable"
                        style="width: 150px;"
                        value={skill.Name}
                        data-skill={skill.Name}
                        onchange="characterUtils.handleSkillNameChange(this)"
                    />
                } else {
                    <div class="skill-name-wrapper">
                        <span class="skill-name" title={skill.Name}>{skill.Name}</span>
                        <span class="skill-default ms-1 small text-secondary">({strconv.Itoa(skill.Default)}%)</span>
                    </div>
                }
            </div>
            <div class="skill-values-container">
                <div class="skill-value-input">
                    <input
                        type="number"
                        class="form-control form-control-sm editable skill-value-field"
                        value={strconv.Itoa(skill.Value)}
                        data-skill={skill.Name}
                        data-skillvalue={strconv.Itoa(skill.Value)}
                        onchange="characterUtils.recalculateSheetValues(this, 'skill')"
                        title="Regular"
                        min={strconv.Itoa(skill.Default)}
                        max="90"
                    />
                    <span class="input-group-text percent-symbol">%</span>
                </div>
                <div class="derived-values">
                    <span class="half-value">{strconv.Itoa(skill.Value/2)}</span>
                    <span class="divider">/</span>
                    <span class="fifth-value">{strconv.Itoa(skill.Value/5)}</span>
                </div>
            </div>
        </div>
    </div>
}

// Sort skills with priority skills at the top
func sortSkillsByPriority(skills map[string]models.Skill) []models.Skill {
    // Create a slice to hold the skills
    var skillSlice []models.Skill

    // Convert map to slice
    for _, skill := range skills {
        if skill.Name != "" && skill.Name != "Dodge_Copy" {
            skillSlice = append(skillSlice, skill)
        }
    }

    // Sort the slice - first by priority (IsPriority true comes first),
    // then alphabetically within each priority group
    sort.Slice(skillSlice, func(i, j int) bool {
        // If priorities are different, sort by priority (true comes first)
        if skillSlice[i].IsPriority != skillSlice[j].IsPriority {
            return skillSlice[i].IsPriority // True values come before false
        }
        
        // If priorities are the same, sort alphabetically by name
        return skillSlice[i].Name < skillSlice[j].Name
    })

    return skillSlice
}