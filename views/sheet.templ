package views

import "book-of-shadows/models"
import "strconv"
import "sort"
import "strings"

templ CharacterSheet(investigator *models.Investigator) {
    @hidden(investigator)
    <div class="container-fluid p-3 coc-sheet">
        <!-- Header -->
        <div class="text-center mb-3">
            <h1 class="sheet-title">Pulp Investigator</h1>
        </div>

        <!-- Personal Information -->
        <div class="row mb-3">
            <div class="col-md-4">
                <label for={investigator.ID}>Name</label>
                <input
                    type="text"
                    id={ investigator.ID }
                    class="form-control"
                    value={ investigator.Name }
                    data-field="Name"
                    onchange="characterUtils.updatePersonalInfo(this)"
                />
            </div>
            <div class="col-md-4">
                <label for="inv-birth">Birthplace</label>
                <input
                    id="inv-birth"
                    type="text"
                    class="form-control"
                    value={ investigator.Birthplace }
                    data-field="Birthplace"
                    onchange="characterUtils.updatePersonalInfo(this)"
                />
            </div>
            <div class="col-md-4">
                <label for="inv-res">Residence</label>
                <input
                    type="text"
                    id="inv-res"
                    class="form-control"
                    value={ investigator.Residence }
                    data-field="Residence"
                    onchange="characterUtils.updatePersonalInfo(this)"
                />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label>Occupation</label>
                <p class="form-control">{ investigator.Occupation.Name }</p>
            </div>
            <div class="col-md-4">
                <label>Archetype</label>
                <p class="form-control">{ investigator.Archetype.Name }</p>
            </div>
            <div class="col-md-4">
                <label for="inv-age">Age</label>
                <input
                    type="number"
                    class="form-control"
                    value={ strconv.Itoa(investigator.Age) }
                    data-field="Age"
                    onchange="characterUtils.updatePersonalInfo(this)"
                />
            </div>
        </div>

        <!-- Characteristics and Combat Stats -->
        <div class="row mb-4">
            <!-- Characteristics -->
            <div class="col-md-8">
                <h3 class="section-title">Characteristics</h3>
                <div class="row g-2">
                    for _, attr := range investigator.Attributes {
                        if (!strings.HasPrefix(attr.Name, "Current") && !strings.HasPrefix(attr.Name, "Max")) {
                            <div class="col-md-3 mb-2">
                                <div class="characteristic-box p-2 border">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <strong>{ attr.Name }</strong>
                                        <span class="value" data-attr={attr.Name}>{ strconv.Itoa(attr.Value) }</span>
                                    </div>
                                    <div class="d-flex justify-content-end">
                                        <small class="me-1" title="Half value" data-half>{ strconv.Itoa(attr.Value/2) }</small>
                                        <small class="ms-1" title="Fifth value" data-fifth>{ strconv.Itoa(attr.Value/5) }</small>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- Combat Stats -->
            <div class="col-md-4">
                <h3 class="section-title">Combat Stats</h3>
                <div class="mb-2">
                    <label class="me-2">HP</label>
                    <input
                        type="number"
                        class="form-control form-control-sm d-inline-block w-auto"
                        value={ strconv.Itoa(investigator.Attributes["HitPoints"].Value) }
                        data-attr="HitPoints"
                        title="CurrentHP"
                        min="0"
                        onchange="characterUtils.recalculateValues(this, 'attribute')"
                    />
                    <span class="ms-2">/ { strconv.Itoa(investigator.Attributes["MaxHP"].Value) }</span>
                </div>
                <div class="mb-2">
                    <label class="me-2">MP</label>
                    <input
                        type="number"
                        class="form-control form-control-sm d-inline-block w-auto"
                        value={ strconv.Itoa(investigator.Attributes["MagicPoints"].Value) }
                        data-attr="MagicPoints"
                        title="CurrentMP"
                        min="0"
                        onchange="characterUtils.recalculateValues(this, 'attribute')"
                    />
                    <span class="ms-2">/ { strconv.Itoa(investigator.Attributes["MaxMP"].Value) }</span>
                </div>
                <div class="mb-2">
                    <label class="me-2">Sanity</label>
                    <input
                        type="number"
                        class="form-control form-control-sm d-inline-block w-auto"
                        value={ strconv.Itoa(investigator.Attributes["Sanity"].Value) }
                        data-attr="Sanity"
                        title="CurrentSanity"
                        onchange="characterUtils.recalculateValues(this, 'attribute')"
                        min="0"
                    />
                    <span class="ms-2">/ { strconv.Itoa(investigator.Attributes["MaxSanity"].Value) }</span>
                </div>
                <div class="mb-2">
                    <label class="me-2">Luck</label>
                    <input
                        type="number"
                        class="form-control form-control-sm d-inline-block w-auto"
                        value={ strconv.Itoa(investigator.Attributes["Luck"].Value) }
                        data-attr="Luck"
                        title="CurrentLuck"
                        min="0"
                        onchange="characterUtils.recalculateValues(this, 'attribute')"
                    />
                </div>
                <div class="mb-2">
                    <label class="me-2">Move</label>
                    <span class="badge bg-light text-dark border">{ strconv.Itoa(investigator.Move) }</span>
                </div>
                <div class="mb-2">
                    <label class="me-2">Build</label>
                    <span class="badge bg-light text-dark border">{ investigator.Build }</span>
                </div>
                <div class="mb-2">
                    <label class="me-2">Damage Bonus</label>
                    <span class="badge bg-light text-dark border">{ investigator.DamageBonus }</span>
                </div>
            </div>
        </div>

        <!-- Status Checkboxes -->
        <div class="status-checks mb-4 p-2 border bg-light">
            <div class="d-flex flex-wrap gap-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="temp-insanity" />
                    <label class="form-check-label" for="temp-insanity">Temporary Insanity</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="indef-insanity" />
                    <label class="form-check-label" for="indef-insanity">Indefinite Insanity</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="major-wound" />
                    <label class="form-check-label" for="major-wound">Major Wound</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="unconscious" />
                    <label class="form-check-label" for="unconscious">Unconscious</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="dying" />
                    <label class="form-check-label" for="dying">Dying</label>
                </div>
            </div>
        </div>

        <!-- Skills Section -->
        <div class="mb-4">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h3 class="section-title">Skills</h3>
                <div class="skill-points">
                    <span class="me-2">Occupation: { strconv.Itoa(investigator.OccupationPoints) }</span>
                    <span class="me-2">Interest: { strconv.Itoa(investigator.FreePoints) }</span>
                    if investigator.ArchetypePoints > 0 {
                        <span>Archetype: { strconv.Itoa(investigator.ArchetypePoints) }</span>
                    }
                </div>
            </div>

            <div class="skills-grid">
                for _, skill := range sortSkills(investigator.Skills) {
                    if skill.Name != "" && skill.Name != "Dodge_Copy" && skill.Base == 0 {
                        <div class="skill-item p-1 border-bottom">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <input
                                        type="checkbox"
                                        class="form-check-input me-2"
                                        data-skill={ skill.Name }
                                        if skill.IsSelected {
                                            checked
                                        }
                                        onchange="characterUtils.handleSkillToggleCheck(this)"
                                    />
                                    if skill.NeedsFormDef == 1 {
                                        <input
                                            type="text"
                                            class="form-control form-control-sm"
                                            style="width: 120px;"
                                            value={ skill.Name }
                                            data-skill={ skill.Name }
                                            onchange="characterUtils.handleSkillNameChange(this)"
                                        />
                                    } else {
                                        <span title={ "Default: " + strconv.Itoa(skill.Default) + "%" }>
                                            { skill.Name } ({ strconv.Itoa(skill.Default) }%)
                                        </span>
                                    }
                                </div>
                                <div class="d-flex align-items-center">
                                    <input
                                        type="number"
                                        class="form-control form-control-sm me-1"
                                        style="width: 55px;"
                                        value={ strconv.Itoa(skill.Value) }
                                        data-skill={ skill.Name }
                                        onchange="characterUtils.recalculateValues(this, 'skill')"
                                        title="Regular"
                                        min={ strconv.Itoa(skill.Default) }
                                    />
                                    <small class="mx-1 text-secondary">{ strconv.Itoa(skill.Value/2) }/{ strconv.Itoa(skill.Value/5) }</small>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Weapons Section -->
        <!-- <div class="mb-4">
            <h3 class="section-title">Weapons</h3>
            <table class="table table-sm table-bordered">
                <thead class="table-light">
                    <tr>
                        <th>Weapon</th>
                        <th>Skill</th>
                        <th>Damage</th>
                        <th># of Attacks</th>
                        <th>Range</th>
                        <th>Ammo</th>
                        <th>Malf.</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Brawl</td>
                        <td><input type="text" class="form-control form-control-sm" /></td>
                        <td>1D3 + DB</td>
                        <td>1</td>
                        <td>-</td>
                        <td>-</td>
                        <td>-</td>
                    </tr>
                    <tr>
                        <td><input type="text" class="form-control form-control-sm" /></td>
                        <td><input type="text" class="form-control form-control-sm" /></td>
                        <td><input type="text" class="form-control form-control-sm" /></td>
                        <td><input type="text" class="form-control form-control-sm" /></td>
                        <td><input type="text" class="form-control form-control-sm" /></td>
                        <td><input type="text" class="form-control form-control-sm" /></td>
                        <td><input type="text" class="form-control form-control-sm" /></td>
                    </tr>
                </tbody>
            </table>
        </div> -->

        <!-- Pulp Talents Section -->
        if len(investigator.Talents) > 0 {
            <div class="mb-4">
                <h3 class="section-title">Pulp Talents</h3>
                <div class="talents-container p-2 border">
                    for _, talent := range investigator.Talents {
                        <div class="talent-item mb-2">
                            <h5>{ talent.Name }</h5>
                            <p class="mb-0">{ talent.Description }</p>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <style>
        .coc-sheet {
            font-family: 'Georgia', serif;
            background-color: #f9f9f9;
            border: 1px solid #333;
            border-radius: 5px;
        }

        .sheet-title {
            font-weight: bold;
            font-size: 1.8rem;
            letter-spacing: 1px;
        }

        .section-title {
            font-size: 1.2rem;
            font-weight: bold;
            border-bottom: 1px solid #333;
            padding-bottom: 3px;
            margin-bottom: 10px;
        }

        .skills-grid {
            column-count: 3;
            column-gap: 20px;
        }

        .skill-item {
            break-inside: avoid;
            page-break-inside: avoid;
            -webkit-column-break-inside: avoid;
        }

        /* Responsive adjustments */
        @media (max-width: 992px) {
            .skills-grid {
                column-count: 2;
            }
        }

        @media (max-width: 576px) {
            .skills-grid {
                column-count: 1;
            }
        }
    </style>
}

func sortSkills(skills map[string]models.Skill) []models.Skill {
    // Create a slice to hold the skills
    var skillSlice []models.Skill

    // Convert map to slice
    for _, skill := range skills {
        if skill.Name != "" && skill.Name != "Dodge_Copy" {
            skillSlice = append(skillSlice, skill)
        }
    }

    // Sort the slice by name
    sort.Slice(skillSlice, func(i, j int) bool {
        return skillSlice[i].Name < skillSlice[j].Name
    })

    return skillSlice
}

templ hidden(investigator *models.Investigator) {
    <input
        type="hidden"
        id="currentCharacter"
        value={ mustJson(investigator) }
    />
}