package views

import "book-of-shadows/models"
import "sort"
import "fmt"
import "encoding/json"


templ InvestigatorsList(investigators map[string]*models.Investigator) {
        <div class="container ">
            <div class="float-end">
                <button type="button" class="btn btn-secondary " data-bs-toggle="modal" data-bs-target="#exportModal">
                    Export
                </button>
                <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#importModal">
                    Import
                </button>
            </div>
        </div>

        // Export Modal
        <div id="exportModal" class="modal fade" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5">
                            Export Investigators
                        </h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <textarea class="form-control" id="exportCode" disabled
                            hx-get="/api/investigator/list/export"
                            hx-trigger="load"
                            hx-swap="innerHTML"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button
                            onclick="navigator.clipboard.writeText(document.getElementById('exportCode').value);"
                            type="button" class="btn btn-primary">Copy Code</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        // Import Modal
        <div id="importModal" class="modal fade" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5">Import Investigators</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                            <textarea class="form-control" id="importCode" class="w-full h-32 p-2 border rounded" placeholder="Paste export code here"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button
                            onclick="characterUtils.importInvestigators();"
                            type="button" class="btn btn-primary" hx-swap="none">Import</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        <div
        id="refresh-list"
        hx-get="/api/investigator/list"
        hx-trigger="import from:body"
        hx-target="#character-sheet"
        hx-swap="innerHTML"
    ></div>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        for _, inv := range sortInvestigators(investigators) {
            <div class="p-4 rounded-lg" style="background-color: rgba(104, 109, 118, 0.1)">
                <h3 class="text-xl font-bold" style="color: #373A40">{ inv.Name }</h3>
                <p style="color: #686D76">{ inv.Occupation.Name }</p>
                <div class="mt-4 flex gap-2">
                    <button
                        hx-get={fmt.Sprintf("/api/investigator/%s", inv.ID)}
                        hx-target="#character-sheet"
                        class="px-3 py-1 rounded transition-all"
                        style="background-color: rgba(104, 109, 118, 0.8); color: white; border: 1px solid rgba(255, 255, 255, 0.2)">
                        Load
                    </button>
                    <button
                        hx-delete={fmt.Sprintf("/api/investigator/delete/%s", inv.ID)}
                        hx-target="closest div"
                        class="px-3 py-1 rounded transition-all"
                        style="background-color: rgba(220, 95, 0, 0.8); color: white; border: 1px solid rgba(255, 255, 255, 0.2)"
                        hx-confirm="Are you sure?"
                    >
                        Delete
                    </button>
                    <div
                        hx-get="/api/investigator/list"
                        hx-trigger="deleted from:body"
                        hx-target="#character-sheet"
                        style="display: none"
                    >
                    </div>
                    <button
                        hx-swap="none"
                        onclick={ templ.ComponentScript{
                            Name: "characterUtils.exportPDF",
                            Call: fmt.Sprintf("characterUtils.exportPDF(event, '%s')", inv.ID),
                        }}
                        class="px-3 py-1 rounded transition-all"
                        style="background-color: rgba(55, 58, 64, 0.8); color: white; border: 1px solid rgba(255, 255, 255, 0.2)"
                    >PDF</button>

                </div>
            </div>
        }
    </div>

}


func sortInvestigators(invs map[string]*models.Investigator) []*models.Investigator {
    // Create a slice to hold the skills
    var investigatorSlice []*models.Investigator

    // Convert map to slice
    for _, inv := range invs {
        investigatorSlice = append(investigatorSlice, inv)
    }


    // Sort the slice by name
    sort.Slice(investigatorSlice, func(i, j int) bool {
        return investigatorSlice[i].ID < investigatorSlice[j].ID
    })

    return investigatorSlice
}

func mustJson(v interface{}) string {
    b, err := json.Marshal(v)
    if err != nil {
        return ""
    }
    return string(b)
}
type skillItem struct {
    Name  string
    Value int
}