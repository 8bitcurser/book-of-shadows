// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "book-of-shadows/models"

func BaseInvForm() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"container-fluid p-3 coc-sheet\"><!-- Header --><div class=\"mb-4\"><h2 class=\"text-xl font-bold\" style=\"color: #373A40\">Personal Information</h2></div><form id=\"stepForm\" class=\"row g-3\" hx-post=\"/api/investigator/create/\" hx-target=\"#character-sheet\"><!-- Personal Information --><div class=\"col-md-3\"><label class=\"form-label\">Name</label> <input type=\"text\" name=\"name\" class=\"form-control\" required onchange=\"characterUtils.checkFormCompletion()\" onkeyup=\"characterUtils.checkFormCompletion()\"></div><div class=\"col-md-3\"><label class=\"form-label\">Age</label> <input type=\"number\" name=\"age\" min=\"15\" max=\"90\" class=\"form-control\" required onchange=\"characterUtils.checkFormCompletion()\" onkeyup=\"characterUtils.checkFormCompletion()\"></div><div class=\"col-md-3\"><label class=\"form-label\">Residence</label> <input type=\"text\" name=\"residence\" class=\"form-control\" required onchange=\"characterUtils.checkFormCompletion()\" onkeyup=\"characterUtils.checkFormCompletion()\"></div><div class=\"col-md-3\"><label class=\"form-label\">Birthplace</label> <input type=\"text\" name=\"birthplace\" class=\"form-control\" required onchange=\"characterUtils.checkFormCompletion()\" onkeyup=\"characterUtils.checkFormCompletion()\"></div><div class=\"col-md-6\"><label class=\"form-label\">Archetype</label> <select name=\"archetype\" id=\"archetype-select\" class=\"form-control\" required onchange=\"characterUtils.handleArchetypeSelection(this)\"><option value=\"\">Select Archetype</option> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for arch := range models.ArchetypesList {
			archEntity, _ := models.Archetypes[models.ArchetypesList[arch]]
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(archEntity.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 79, Col: 54}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-description=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(archEntity.GetDescription())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 79, Col: 101}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(archEntity.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 79, Col: 119}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select><p id=\"archetype-description\" class=\"mt-2 text-secondary\" style=\"min-height: 3em;\"></p></div><div class=\"col-md-6\" id=\"occupation-container\" style=\"display: none;\"><label class=\"form-label\">Occupation</label> <select name=\"occupation\" id=\"occupation-select\" class=\"form-control\" required onchange=\"characterUtils.handleOccupationSelection(this)\"><option value=\"\">Select Occupation</option> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for occ := range models.OccupationsList {
			occEntity, _ := models.Occupations[models.OccupationsList[occ]]
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(occEntity.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 101, Col: 53}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-description=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(occEntity.GetDescription())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 101, Col: 99}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(occEntity.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 101, Col: 116}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select><p id=\"occupation-description\" class=\"mt-2 text-secondary\" style=\"min-height: 3em;\"></p></div><div class=\"col-12 mt-4\"><button id=\"next-step-button\" type=\"submit\" class=\"btn btn-primary\" disabled>Assign Attributes</button></div></form><style>\n            .coc-sheet {\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n                background-color: #fff;\n                border-radius: 8px;\n            }\n        </style><script>\n            // Extend the characterUtils object with the new functions\n            if (!window.characterUtils) {\n                window.characterUtils = {};\n            }\n\n            // Function to handle archetype selection\n            window.characterUtils.handleArchetypeSelection = function(selectElement) {\n                // First, show the description as before\n                this.showDescription(selectElement.value, 'archetype-description');\n\n                // Then, show the occupation section if an archetype is selected\n                const occupationContainer = document.getElementById('occupation-container');\n\n                if (selectElement.value) {\n                    // Show the occupation container with a smooth transition\n                    occupationContainer.style.display = 'block';\n                } else {\n                    // Hide the occupation container\n                    occupationContainer.style.display = 'none';\n                }\n\n                // Check if the form is complete\n                this.checkFormCompletion();\n            };\n\n            // Function to handle occupation selection\n            window.characterUtils.handleOccupationSelection = function(selectElement) {\n                // Show the description\n                this.showDescription(selectElement.value, 'occupation-description');\n\n                // Check if the form is complete\n                this.checkFormCompletion();\n            };\n\n            // Function to check if the form is complete\n            window.characterUtils.checkFormCompletion = function() {\n                const nameInput = document.querySelector('input[name=\"name\"]');\n                const ageInput = document.querySelector('input[name=\"age\"]');\n                const residenceInput = document.querySelector('input[name=\"residence\"]');\n                const birthplaceInput = document.querySelector('input[name=\"birthplace\"]');\n                const archetypeSelect = document.getElementById('archetype-select');\n                const occupationSelect = document.getElementById('occupation-select');\n                const nextButton = document.getElementById('next-step-button');\n\n                // Check if all fields are filled\n                const isNameFilled = nameInput && nameInput.value.trim() !== '';\n                const isAgeFilled = ageInput && ageInput.value !== '';\n                const isResidenceFilled = residenceInput && residenceInput.value.trim() !== '';\n                const isBirthplaceFilled = birthplaceInput && birthplaceInput.value.trim() !== '';\n                const isArchetypeSelected = archetypeSelect && archetypeSelect.value !== '';\n                const isOccupationSelected = occupationSelect && occupationSelect.value !== '';\n\n                // Only enable the button if all fields are filled\n                nextButton.disabled = !(\n                    isNameFilled &&\n                    isAgeFilled &&\n                    isResidenceFilled &&\n                    isBirthplaceFilled &&\n                    isArchetypeSelected &&\n                    isOccupationSelected\n                );\n            };\n\n            // If showDescription doesn't exist, add it\n            if (!window.characterUtils.showDescription) {\n                window.characterUtils.showDescription = function(value, targetId) {\n                    const descriptionElement = document.getElementById(targetId);\n                    const selectElement = event.target;\n                    const selectedOption = Array.from(selectElement.options).find(option => option.value === value);\n\n                    if (selectedOption && selectedOption.dataset.description) {\n                        descriptionElement.textContent = selectedOption.dataset.description;\n                    } else {\n                        descriptionElement.textContent = \"\";\n                    }\n                };\n            }\n\n            // Initialize form check on page load\n            document.addEventListener('DOMContentLoaded', function() {\n                // Add event listener to occupation select\n                const occupationSelect = document.getElementById('occupation-select');\n                if (occupationSelect) {\n                    occupationSelect.addEventListener('change', function() {\n                        characterUtils.handleOccupationSelection(this);\n                    });\n                }\n\n                // Initial form check\n                characterUtils.checkFormCompletion();\n            });\n        </script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
