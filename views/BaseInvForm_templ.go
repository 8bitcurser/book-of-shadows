// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "book-of-shadows/models"

func BaseInvForm() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"container-fluid p-4 coc-sheet\"><!-- Progress Bar & Step Indicator --><div class=\"mb-4\"><div class=\"progress mb-3\" style=\"height: 8px; background-color: #f0f0f0;\"><div class=\"progress-bar\" role=\"progressbar\" style=\"width: 20%; background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%);\" aria-valuenow=\"20\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div></div><div class=\"d-flex justify-content-between align-items-center px-2\"><div class=\"step-indicator active d-flex flex-column align-items-center\"><div class=\"step-circle mb-1\" style=\"width: 30px; height: 30px; border-radius: 50%; background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); color: white; display: flex; align-items: center; justify-content: center;\"><span>1</span></div><span class=\"step-label small fw-medium\" style=\"color: #6d6875;\">Personal Info</span></div><div class=\"step-connector flex-grow-1 mx-2\" style=\"height: 2px; background: #f0f0f0;\"></div><div class=\"step-indicator d-flex flex-column align-items-center\"><div class=\"step-circle mb-1\" style=\"width: 30px; height: 30px; border-radius: 50%; background: #e5e5e5; color: #999; display: flex; align-items: center; justify-content: center;\"><span>2</span></div><span class=\"step-label small\">Attributes</span></div><div class=\"step-connector flex-grow-1 mx-2\" style=\"height: 2px; background: #f0f0f0;\"></div><div class=\"step-indicator d-flex flex-column align-items-center\"><div class=\"step-circle mb-1\" style=\"width: 30px; height: 30px; border-radius: 50%; background: #e5e5e5; color: #999; display: flex; align-items: center; justify-content: center;\"><span>3</span></div><span class=\"step-label small\">Skills</span></div><div class=\"step-connector flex-grow-1 mx-2\" style=\"height: 2px; background: #f0f0f0;\"></div><div class=\"step-indicator d-flex flex-column align-items-center\"><div class=\"step-circle mb-1\" style=\"width: 30px; height: 30px; border-radius: 50%; background: #e5e5e5; color: #999; display: flex; align-items: center; justify-content: center;\"><span>4</span></div><span class=\"step-label small\">Complete</span></div></div></div><!-- Header with new styling --><div class=\"mb-4 text-center\"><h2 class=\"fw-bold mb-3\" style=\"color: #6d6875\">Personal Information</h2><p class=\"text-secondary mb-4\">Start by entering your investigator's basic details</p></div><form id=\"stepForm\" class=\"row g-4\" hx-post=\"/api/investigator/create/\" hx-target=\"#character-sheet\"><!-- Personal Information --><div class=\"col-md-6 col-lg-3\"><label class=\"form-label fw-medium\">Name</label> <input type=\"text\" name=\"name\" class=\"form-control shadow-sm\" required onchange=\"characterUtils.checkFormCompletion()\" onkeyup=\"characterUtils.checkFormCompletion()\"></div><div class=\"col-md-6 col-lg-3\"><label class=\"form-label fw-medium\">Age</label> <input type=\"number\" name=\"age\" min=\"15\" max=\"90\" class=\"form-control shadow-sm\" required onchange=\"characterUtils.checkFormCompletion()\" onkeyup=\"characterUtils.checkFormCompletion()\"></div><div class=\"col-md-6 col-lg-3\"><label class=\"form-label fw-medium\">Residence</label> <input type=\"text\" name=\"residence\" class=\"form-control shadow-sm\" required onchange=\"characterUtils.checkFormCompletion()\" onkeyup=\"characterUtils.checkFormCompletion()\"></div><div class=\"col-md-6 col-lg-3\"><label class=\"form-label fw-medium\">Birthplace</label> <input type=\"text\" name=\"birthplace\" class=\"form-control shadow-sm\" required onchange=\"characterUtils.checkFormCompletion()\" onkeyup=\"characterUtils.checkFormCompletion()\"></div><div class=\"col-md-6\"><label class=\"form-label fw-medium\">Archetype</label> <select name=\"archetype\" id=\"archetype-select\" class=\"form-control shadow-sm\" required onchange=\"characterUtils.handleArchetypeSelection(this)\"><option value=\"\">Select Archetype</option> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for arch := range models.ArchetypesList {
			archEntity, _ := models.Archetypes[models.ArchetypesList[arch]]
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(archEntity.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 115, Col: 54}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-description=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(archEntity.GetDescription())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 115, Col: 101}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(archEntity.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 115, Col: 119}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select><div id=\"archetype-description\" class=\"mt-3 p-3 rounded shadow-sm bg-light text-secondary\" style=\"min-height: 4em; display: none;\"></div></div><div class=\"col-md-6\" id=\"occupation-container\" style=\"display: none;\"><label class=\"form-label fw-medium\">Occupation</label> <select name=\"occupation\" id=\"occupation-select\" class=\"form-control shadow-sm\" required onchange=\"characterUtils.handleOccupationSelection(this)\"><option value=\"\">Select Occupation</option> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for occ := range models.OccupationsList {
			occEntity, _ := models.Occupations[models.OccupationsList[occ]]
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<option value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(occEntity.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 137, Col: 53}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" data-description=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(occEntity.GetDescription())
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 137, Col: 99}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(occEntity.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/BaseInvForm.templ`, Line: 137, Col: 116}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</option>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</select><div id=\"occupation-description\" class=\"mt-3 p-3 rounded shadow-sm bg-light text-secondary\" style=\"min-height: 4em; display: none;\"></div></div><div class=\"col-12 mt-4 text-center\"><button id=\"next-step-button\" type=\"submit\" class=\"btn btn-primary btn-lg px-4 py-2 d-flex align-items-center justify-content-center mx-auto\" style=\"background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); border: none; min-width: 240px;\" disabled><span>Continue to Attributes</span> <i class=\"bi bi-arrow-right ms-2\"></i></button></div></form><style>\n            .coc-sheet {\n                font-family: 'Roboto', sans-serif;\n                background-color: #fff;\n                border-radius: 1rem;\n                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.08);\n                max-width: 1200px;\n                margin: 0 auto;\n            }\n            \n            .form-control:focus, select:focus {\n                border-color: #b5838d;\n                box-shadow: 0 0 0 0.25rem rgba(181, 131, 141, 0.25);\n            }\n            \n            .form-control, select {\n                border-radius: 0.5rem;\n                padding: 0.625rem 0.75rem;\n                transition: all 0.2s;\n            }\n            \n            .form-label {\n                color: #6d6875;\n                margin-bottom: 0.5rem;\n            }\n            \n            #next-step-button:hover {\n                transform: translateY(-2px);\n                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);\n            }\n            \n            #next-step-button {\n                transition: all 0.3s;\n                border-radius: 0.5rem;\n            }\n            \n            #next-step-button:disabled {\n                background: #e5e5e5 !important;\n                color: #999;\n                transform: none;\n                box-shadow: none;\n            }\n            \n            /* Progress steps styling */\n            .step-indicator {\n                position: relative;\n                z-index: 1;\n            }\n            \n            .step-circle {\n                transition: all 0.3s;\n            }\n            \n            .step-label {\n                transition: all 0.3s;\n            }\n            \n            .step-indicator.completed .step-label {\n                color: #6d6875;\n            }\n            \n            .step-indicator.active .step-label {\n                color: #6d6875;\n                font-weight: 500;\n            }\n            \n            /* Submit button pulsing when all fields are filled */\n            @keyframes pulse-button {\n                0% { transform: scale(1); }\n                50% { transform: scale(1.03); }\n                100% { transform: scale(1); }\n            }\n            \n            .pulse-button {\n                animation: pulse-button 1.5s infinite;\n            }\n\n            /* Form field transitions */\n            @keyframes field-highlight {\n                0% { background-color: rgba(181, 131, 141, 0.1); }\n                100% { background-color: transparent; }\n            }\n            \n            .field-highlight {\n                animation: field-highlight 1s;\n            }\n        </style><script>\n            // Extend the characterUtils object with the new functions\n            if (!window.characterUtils) {\n                window.characterUtils = {};\n            }\n\n            // Function to handle archetype selection\n            window.characterUtils.handleArchetypeSelection = function(selectElement) {\n                // Show the description with an improved animation\n                const descriptionElement = document.getElementById('archetype-description');\n                const selectedOption = Array.from(selectElement.options).find(option => option.value === selectElement.value);\n                \n                if (selectedOption && selectedOption.dataset.description) {\n                    descriptionElement.textContent = selectedOption.dataset.description;\n                    descriptionElement.style.display = 'block';\n                    // Add a subtle animation\n                    descriptionElement.style.opacity = '0';\n                    setTimeout(() => {\n                        descriptionElement.style.transition = 'opacity 0.3s ease';\n                        descriptionElement.style.opacity = '1';\n                    }, 10);\n                } else {\n                    descriptionElement.style.opacity = '0';\n                    setTimeout(() => {\n                        descriptionElement.style.display = 'none';\n                    }, 300);\n                }\n\n                // Then, show the occupation section if an archetype is selected\n                const occupationContainer = document.getElementById('occupation-container');\n\n                if (selectElement.value) {\n                    // Show the occupation container with a smooth transition\n                    occupationContainer.style.display = 'block';\n                    occupationContainer.style.opacity = '0';\n                    setTimeout(() => {\n                        occupationContainer.style.transition = 'opacity 0.3s ease';\n                        occupationContainer.style.opacity = '1';\n                    }, 10);\n                } else {\n                    // Hide the occupation container\n                    occupationContainer.style.opacity = '0';\n                    setTimeout(() => {\n                        occupationContainer.style.display = 'none';\n                    }, 300);\n                }\n\n                // Check if the form is complete\n                this.checkFormCompletion();\n            };\n\n            // Function to handle occupation selection\n            window.characterUtils.handleOccupationSelection = function(selectElement) {\n                // Show the description with animation\n                const descriptionElement = document.getElementById('occupation-description');\n                const selectedOption = Array.from(selectElement.options).find(option => option.value === selectElement.value);\n                \n                if (selectedOption && selectedOption.dataset.description) {\n                    descriptionElement.textContent = selectedOption.dataset.description;\n                    descriptionElement.style.display = 'block';\n                    // Add a subtle animation\n                    descriptionElement.style.opacity = '0';\n                    setTimeout(() => {\n                        descriptionElement.style.transition = 'opacity 0.3s ease';\n                        descriptionElement.style.opacity = '1';\n                    }, 10);\n                } else {\n                    descriptionElement.style.opacity = '0';\n                    setTimeout(() => {\n                        descriptionElement.style.display = 'none';\n                    }, 300);\n                }\n\n                // Check if the form is complete\n                this.checkFormCompletion();\n            };\n\n            // Function to check if the form is complete\n            window.characterUtils.checkFormCompletion = function() {\n                const nameInput = document.querySelector('input[name=\"name\"]');\n                const ageInput = document.querySelector('input[name=\"age\"]');\n                const residenceInput = document.querySelector('input[name=\"residence\"]');\n                const birthplaceInput = document.querySelector('input[name=\"birthplace\"]');\n                const archetypeSelect = document.getElementById('archetype-select');\n                const occupationSelect = document.getElementById('occupation-select');\n                const nextButton = document.getElementById('next-step-button');\n\n                // Check if all fields are filled\n                const isNameFilled = nameInput && nameInput.value.trim() !== '';\n                const isAgeFilled = ageInput && ageInput.value !== '';\n                const isResidenceFilled = residenceInput && residenceInput.value.trim() !== '';\n                const isBirthplaceFilled = birthplaceInput && birthplaceInput.value.trim() !== '';\n                const isArchetypeSelected = archetypeSelect && archetypeSelect.value !== '';\n                const isOccupationSelected = occupationSelect && occupationSelect.value !== '';\n\n                // Only enable the button if all fields are filled\n                const isFormComplete = (\n                    isNameFilled &&\n                    isAgeFilled &&\n                    isResidenceFilled &&\n                    isBirthplaceFilled &&\n                    isArchetypeSelected &&\n                    isOccupationSelected\n                );\n                \n                nextButton.disabled = !isFormComplete;\n                \n                // Add a visual feedback\n                if (isFormComplete) {\n                    nextButton.style.background = 'linear-gradient(135deg, #6d6875 0%, #b5838d 100%)';\n                    \n                    // Make the button pulse to draw attention\n                    nextButton.classList.add('pulse-button');\n                } else {\n                    nextButton.style.background = '#e5e5e5';\n                    nextButton.classList.remove('pulse-button');\n                }\n                \n                return isFormComplete;\n            };\n            \n            // Add field completion highlight\n            window.characterUtils.highlightField = function(field) {\n                field.classList.add('field-highlight');\n                setTimeout(() => {\n                    field.classList.remove('field-highlight');\n                }, 1000);\n            };\n\n            // Initialize form check on page load\n            document.addEventListener('DOMContentLoaded', function() {\n                // Add event listener to occupation select\n                const occupationSelect = document.getElementById('occupation-select');\n                if (occupationSelect) {\n                    occupationSelect.addEventListener('change', function() {\n                        characterUtils.handleOccupationSelection(this);\n                    });\n                }\n\n                // Add focus and blur effects to all form fields\n                const formFields = document.querySelectorAll('.form-control');\n                formFields.forEach(field => {\n                    // Focus effect\n                    field.addEventListener('focus', function() {\n                        this.style.borderColor = '#b5838d';\n                    });\n                    \n                    // Blur effect\n                    field.addEventListener('blur', function() {\n                        // Only keep the border if the field has a value\n                        if (this.value && this.value.trim() !== '') {\n                            this.style.borderColor = '#b5838d';\n                            characterUtils.highlightField(this.parentElement);\n                        } else {\n                            this.style.borderColor = '#ced4da';\n                        }\n                    });\n                    \n                    // Change effect\n                    field.addEventListener('change', function() {\n                        if (this.value && this.value.trim() !== '') {\n                            characterUtils.highlightField(this.parentElement);\n                        }\n                    });\n                });\n\n                // Initial form check\n                characterUtils.checkFormCompletion();\n                \n                // Automatically focus on the first empty required field\n                setTimeout(() => {\n                    const firstEmptyField = document.querySelector('.form-control:required:not([value]):not([value=\"\"])');\n                    if (firstEmptyField) {\n                        firstEmptyField.focus();\n                    }\n                }, 500);\n            });\n        </script></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
