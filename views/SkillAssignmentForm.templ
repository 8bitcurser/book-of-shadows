package views

import "book-of-shadows/models"
import "strconv"
import "fmt"

templ SkillAssignmentForm(investigator *models.Investigator) {
    <div class="container-fluid p-4 border rounded">
        <h2 class="text-center mb-4">Pulp Investigator</h2>

        <input
            type="text"
            id={ investigator.ID }
            class="d-none"
            value={ investigator.Name }
            data-field="Name"
            onchange="characterUtils.updatePersonalInfo(this)"
        />

        <!-- Personal Information Display -->
        <div class="row mb-3">
            <div class="col-md-4">
                <label class="form-label">Name</label>
                <input type="text" class="form-control" value={ investigator.Name } readonly />
            </div>
            <div class="col-md-4">
                <label class="form-label">Birthplace</label>
                <input type="text" class="form-control" value={ investigator.Birthplace } readonly />
            </div>
            <div class="col-md-4">
                <label class="form-label">Residence</label>
                <input type="text" class="form-control" value={ investigator.Residence } readonly />
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-4">
                <label class="form-label">Occupation</label>
                <input type="text" class="form-control" value={ investigator.Occupation.Name } readonly />
            </div>
            <div class="col-md-4">
                <label class="form-label">Archetype</label>
                <input type="text" class="form-control" value={ investigator.Archetype.Name } readonly />
            </div>
            <div class="col-md-4">
                <label class="form-label">Age</label>
                <input type="text" class="form-control" value={ strconv.Itoa(investigator.Age) } readonly />
            </div>
        </div>

        <!-- Tab navigation -->
        <div class="border-top border-bottom pt-2 mb-4">
            <ul class="nav nav-tabs" id="skillsTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button
                        class="nav-link active"
                        id="archetype-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#archetype-skills"
                        type="button"
                        role="tab"
                        aria-controls="archetype-skills"
                        aria-selected="true"
                    >
                        Archetype Skills
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button
                        class="nav-link"
                        id="occupation-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#occupation-skills"
                        type="button"
                        role="tab"
                        aria-controls="occupation-skills"
                        aria-selected="false"
                        disabled
                    >
                        Occupation Skills
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button
                        class="nav-link"
                        id="general-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#general-skills"
                        type="button"
                        role="tab"
                        aria-controls="general-skills"
                        aria-selected="false"
                        disabled
                    >
                        General Skills
                    </button>
                </li>
            </ul>
        </div>

        <!-- Tab content -->
        <div class="tab-content" id="skillsTabContent">
            <!-- Archetype Skills Tab -->
            <div class="tab-pane fade show active" id="archetype-skills" role="tabpanel" aria-labelledby="archetype-tab">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="border-bottom pb-1" style="width: 50%;">Archetype Skills</h3>
                    <div class="points-display">
                        <span>Points:</span>
                        <span class="fw-bold ms-1" id="archetype-points-total">
                            { strconv.Itoa(investigator.ArchetypePoints) }
                        </span>
                        <span class="ms-2">Remaining:</span>
                        <span class="fw-bold ms-1" id="archetype-points">
                            { strconv.Itoa(investigator.ArchetypePoints) }
                        </span>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="row g-3">
                        for _, skill := range investigator.Archetype.Skills {
                            {{skillObj := investigator.Skills[skill]}}
                            if skillObj.Name != "" && skillObj.Name != "Dodge_Copy" && skillObj.Base == 0 {
                                <div class="col-md-4 mb-2">
                                    <div class="skill-box">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="skill-name-container">
                                                <span class="skill-name">{ skillObj.Name }</span>
                                                <span class="skill-default">({ strconv.Itoa(skillObj.Default) }%)</span>
                                            </div>
                                            <div class="skill-values">
                                                <input
                                                    type="number"
                                                    class="form-control skill-input"
                                                    value={ strconv.Itoa(skillObj.Value) }
                                                    data-skill={ skillObj.Name }
                                                    data-skillvalue={ strconv.Itoa(skillObj.Value) }
                                                    data-skilldefault={ strconv.Itoa(skillObj.Default) }
                                                    data-skilltype="archetype"
                                                    onchange="characterUtils.recalculateValues(this, 'skill')"
                                                    min={ strconv.Itoa(skillObj.Default) }
                                                    max="90"
                                                />
                                                <div class="value-displays">
                                                    <span class="half-value" data-half>{ strconv.Itoa(skillObj.Value/2) }</span>
                                                    <span class="divider">|</span>
                                                    <span class="fifth-value" data-fifth>{ strconv.Itoa(skillObj.Value/5) }</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>

                <div class="d-flex justify-content-end transition-opacity" id="confirm-archetype-container" style="opacity: 0; pointer-events: none;">
                    <button
                        id="archetype-continue-btn"
                        type="button"
                        class="btn btn-primary"
                        onclick="navigateToTab('occupation')"
                    >
                        Continue to Occupation Skills
                    </button>
                </div>
            </div>

            <!-- Occupation Skills Tab -->
            <div class="tab-pane fade" id="occupation-skills" role="tabpanel" aria-labelledby="occupation-tab">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="border-bottom pb-1" style="width: 50%;">Occupation Skills</h3>
                    <div class="points-display">
                        <span>Points:</span>
                        <span class="fw-bold ms-1" id="occupation-points-total">
                            { strconv.Itoa(investigator.OccupationPoints) }
                        </span>
                        <span class="ms-2">Remaining:</span>
                        <span class="fw-bold ms-1" id="occupation-points">
                            { strconv.Itoa(investigator.OccupationPoints) }
                        </span>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="row g-3">
                        for _, skillConfiguration := range *investigator.GetOccupationSkills() {
                            {{skillObj := investigator.Skills[skillConfiguration]}}
                            if skillObj.Name != "" && skillObj.Name != "Dodge_Copy" && skillObj.Base == 0 {
                                <div class="col-md-4 mb-2">
                                    <div class="skill-box">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="skill-name-container">
                                                <span class="skill-name">{ skillObj.Name }</span>
                                                <span class="skill-default">({ strconv.Itoa(skillObj.Default) }%)</span>
                                            </div>
                                            <div class="skill-values">
                                                <input
                                                    type="number"
                                                    class="form-control skill-input"
                                                    value={ strconv.Itoa(skillObj.Value) }
                                                    data-skill={ skillObj.Name }
                                                    data-skillvalue={ strconv.Itoa(skillObj.Value) }
                                                    data-skilldefault={ strconv.Itoa(skillObj.Default) }
                                                    data-skilltype="occupation"
                                                    onchange="characterUtils.recalculateValues(this, 'skill')"
                                                    min={ strconv.Itoa(skillObj.Default) }
                                                    max="90"
                                                />
                                                <div class="value-displays">
                                                    <span class="half-value" data-half>{ strconv.Itoa(skillObj.Value/2) }</span>
                                                    <span class="divider">|</span>
                                                    <span class="fifth-value" data-fifth>{ strconv.Itoa(skillObj.Value/5) }</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button
                        type="button"
                        class="btn btn-outline-secondary"
                        onclick="navigateToTab('archetype')"
                    >
                        Back to Archetype Skills
                    </button>
                    <div class="transition-opacity" id="confirm-occupation-container" style="opacity: 0; pointer-events: none;">
                        <button
                            id="occupation-continue-btn"
                            type="button"
                            class="btn btn-primary"
                            onclick="navigateToTab('general')"
                        >
                            Continue to General Skills
                        </button>
                    </div>
                </div>
            </div>

            <!-- General Skills Tab -->
            <div class="tab-pane fade" id="general-skills" role="tabpanel" aria-labelledby="general-tab">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h3 class="border-bottom pb-1" style="width: 50%;">General Skills</h3>
                    <div class="points-display">
                        <span>Points:</span>
                        <span class="fw-bold ms-1" id="general-points-total">
                            { strconv.Itoa(investigator.FreePoints) }
                        </span>
                        <span class="ms-2">Remaining:</span>
                        <span class="fw-bold ms-1" id="general-points">
                            { strconv.Itoa(investigator.FreePoints) }
                        </span>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="row g-3">
                        for _, skillObj := range investigator.Skills {
                            if skillObj.Name != "" && skillObj.Name != "Dodge_Copy" && skillObj.Base == 0 {
                                <div class="col-md-4 mb-2">
                                    <div class="skill-box">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="skill-name-container">
                                                <span class="skill-name">{ skillObj.Name }</span>
                                                <span class="skill-default">({ strconv.Itoa(skillObj.Default) }%)</span>
                                            </div>
                                            <div class="skill-values">
                                                <input
                                                    type="number"
                                                    class="form-control skill-input"
                                                    value={ strconv.Itoa(skillObj.Value) }
                                                    data-skill={ skillObj.Name }
                                                    data-skillvalue={ strconv.Itoa(skillObj.Value) }
                                                    data-skilldefault={ strconv.Itoa(skillObj.Default) }
                                                    data-skilltype="general"
                                                    onchange="characterUtils.recalculateValues(this, 'skill')"
                                                    min={ strconv.Itoa(skillObj.Default) }
                                                    max="90"
                                                />
                                                <div class="value-displays">
                                                    <span class="half-value" data-half>{ strconv.Itoa(skillObj.Value/2) }</span>
                                                    <span class="divider">|</span>
                                                    <span class="fifth-value" data-fifth>{ strconv.Itoa(skillObj.Value/5) }</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button
                        type="button"
                        class="btn btn-outline-secondary"
                        onclick="navigateToTab('occupation')"
                    >
                        Back to Occupation Skills
                    </button>
                    <div class="transition-opacity" id="confirm-general-container" style="opacity: 0; pointer-events: none;">
                        <button
                            id="finish-btn"
                            type="button"
                            class="btn btn-primary"
                            hx-get={ fmt.Sprintf("/api/investigator/%s", investigator.ID) }
                            hx-target="#character-sheet"
                        >
                            Complete Character
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        /* Styling to match character sheet */
        .skill-box {
            padding: 5px 10px;
            border-bottom: 1px solid #dee2e6;
            background-color: #f8f9fa;
            margin-bottom: 5px;
            border-radius: 4px;
            position: relative;
        }

        .skill-name-container {
            flex: 1;
            display: flex;
            align-items: baseline;
        }

        .skill-name {
            font-weight: 500;
            margin-right: 5px;
        }

        .skill-default {
            font-size: 0.8rem;
            color: #6c757d;
        }

        .skill-values {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }

        .skill-input {
            width: 60px;
            text-align: center;
            height: 32px;
            padding: 2px 5px;
            font-size: 0.9rem;
        }

        .value-displays {
            display: flex;
            font-size: 0.8rem;
            color: #6c757d;
            margin-top: 2px;
        }

        .half-value, .fifth-value {
            min-width: 20px;
            text-align: center;
        }

        .divider {
            margin: 0 5px;
        }

        .points-display {
            background-color: #f8f9fa;
            padding: 5px 10px;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }

        /* Remove spinner buttons from number inputs */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        input[type=number] {
            -moz-appearance: textfield;
        }

        .transition-opacity {
            transition: opacity 0.3s ease;
        }
    </style>

    <script>
        // Define global navigation function
        function navigateToTab(tabName) {
            // Enable the tab if it's not the archetype tab (which is always enabled)
            if (tabName !== 'archetype') {
                document.getElementById(tabName + '-tab').disabled = false;
            }

            // Switch to the tab
            const tab = new bootstrap.Tab(document.getElementById(tabName + '-tab'));
            tab.show();
        }

        // Immediately extend the characterUtils object with our enhanced functions
        // This ensures the functions are available before any input events occur
        (function() {
            // Store the original recalculateValues function
            const originalRecalculateValues = window.characterUtils.recalculateValues;

            // Replace with our enhanced version
            window.characterUtils.recalculateValues = function(input, type) {
                if (type === 'skill') {
                    const skillName = input.dataset.skill;
                    const value = parseInt(input.value) || 0;
                    const prevValue = parseInt(input.dataset.skillvalue) || 0;
                    const defaultValue = parseInt(input.dataset.skilldefault) || 0;
                    const skillType = input.dataset.skilltype || 'archetype';

                    // Apply max limit
                    if (value > 90) {
                        input.value = 90;
                        return;
                    }

                    // Calculate difference
                    const difference = value - prevValue;

                    // Get proper points element
                    let pointsId = "";
                    let confirmId = "";
                    let nextTabName = "";

                    if (skillType === "archetype" || document.querySelector('#archetype-skills.active')) {
                        pointsId = "archetype-points";
                        confirmId = "confirm-archetype-container";
                        nextTabName = "occupation";
                    } else if (skillType === "occupation" || document.querySelector('#occupation-skills.active')) {
                        pointsId = "occupation-points";
                        confirmId = "confirm-occupation-container";
                        nextTabName = "general";
                    } else if (skillType === "general" || document.querySelector('#general-skills.active')) {
                        pointsId = "general-points";
                        confirmId = "confirm-general-container";
                        nextTabName = "";
                    }

                    // Get points element and current remaining points
                    const pointsElement = document.getElementById(pointsId);

                    if (pointsElement) {
                        const currentPoints = parseInt(pointsElement.textContent) || 0;
                        const newPoints = currentPoints - difference;

                        // Don't allow negative points
                        if (newPoints < 0) {
                            input.value = prevValue;
                            alert("Not enough points available!");
                            return;
                        }

                        // Update points display
                        pointsElement.textContent = newPoints;

                        // Update skill value tracking
                        input.dataset.skillvalue = value;

                        // Update half and fifth values
                        const container = input.closest('.skill-values');
                        const halfSpan = container.querySelector('[data-half]');
                        const fifthSpan = container.querySelector('[data-fifth]');

                        if (halfSpan) halfSpan.textContent = Math.floor(value / 2);
                        if (fifthSpan) fifthSpan.textContent = Math.floor(value / 5);

                        // Show/hide continue button
                        const confirmContainer = document.getElementById(confirmId);
                        if (confirmContainer) {
                            if (newPoints === 0) {
                                confirmContainer.style.opacity = "1";
                                confirmContainer.style.pointerEvents = "auto";

                                // Auto advance after delay if points are used up
                                if (nextTabName) {
                                    setTimeout(() => {
                                        if (parseInt(pointsElement.textContent) === 0) {
                                            navigateToTab(nextTabName);
                                        }
                                    }, 800);
                                }
                            } else {
                                confirmContainer.style.opacity = "0";
                                confirmContainer.style.pointerEvents = "none";
                            }
                        }
                    }
                }

                // Call original function to update server
                originalRecalculateValues.call(window.characterUtils, input, type);
            };
        })();

        // Add additional functionality when the DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Add tab switching functionality to preserve values
            document.querySelectorAll('button[data-bs-toggle="tab"]').forEach(button => {
                button.addEventListener('shown.bs.tab', function (event) {
                    // If we need additional tab switching logic, we can add it here
                });
            });
        });
    </script>
}