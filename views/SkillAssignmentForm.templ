package views

import (
    "book-of-shadows/models"
    "sort"
    "strconv"
    "fmt"
)

// Main templ for the Skill Assignment Form
templ SkillAssignmentForm(investigator *models.Investigator) {
    <div class="container-fluid p-4 coc-sheet">
        <!-- Progress Bar & Step Indicator -->
        <div class="mb-4">
            <div class="progress mb-3" style="height: 8px; background-color: #f0f0f0;">
                <div class="progress-bar" role="progressbar" style="width: 60%; background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%);" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
            <div class="d-flex justify-content-between align-items-center px-2">
                <div class="step-indicator completed d-flex flex-column align-items-center">
                    <div class="step-circle mb-1" style="width: 30px; height: 30px; border-radius: 50%; background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); color: white; display: flex; align-items: center; justify-content: center;">
                        <i class="bi bi-check-lg"></i>
                    </div>
                    <span class="step-label small fw-medium">Personal Info</span>
                </div>
                <div class="step-connector flex-grow-1 mx-2" style="height: 2px; background: linear-gradient(90deg, #b5838d 0%, #b5838d 100%);"></div>
                <div class="step-indicator completed d-flex flex-column align-items-center">
                    <div class="step-circle mb-1" style="width: 30px; height: 30px; border-radius: 50%; background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); color: white; display: flex; align-items: center; justify-content: center;">
                        <i class="bi bi-check-lg"></i>
                    </div>
                    <span class="step-label small fw-medium">Attributes</span>
                </div>
                <div class="step-connector flex-grow-1 mx-2" style="height: 2px; background: linear-gradient(90deg, #b5838d 0%, #f0f0f0 100%);"></div>
                <div class="step-indicator active d-flex flex-column align-items-center">
                    <div class="step-circle mb-1" style="width: 30px; height: 30px; border-radius: 50%; background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); color: white; display: flex; align-items: center; justify-content: center;">
                        <span>3</span>
                    </div>
                    <span class="step-label small fw-medium" style="color: #6d6875;">Skills</span>
                </div>
                <div class="step-connector flex-grow-1 mx-2" style="height: 2px; background: #f0f0f0;"></div>
                <div class="step-indicator d-flex flex-column align-items-center">
                    <div class="step-circle mb-1" style="width: 30px; height: 30px; border-radius: 50%; background: #e5e5e5; color: #999; display: flex; align-items: center; justify-content: center;">
                        <span>4</span>
                    </div>
                    <span class="step-label small">Complete</span>
                </div>
            </div>
        </div>

        <!-- Header -->
        <div class="mb-4 text-center">
            <h2 class="fw-bold mb-2" style="color: #6d6875">Skill Assignment</h2>
            <p class="text-secondary mb-3">Distribute skill points to customize your investigator</p>
        </div>

        <input
            type="text"
            id={ investigator.ID }
            class="d-none"
            value={ investigator.Name }
            data-field="Name"
            onchange="characterUtils.updatePersonalInfo(this)"
        />

        <!-- Character Overview Card -->
        <div class="card mb-4 shadow-sm" style="border-radius: 1rem; border: none; background-color: #f8f9fa;">
            <div class="card-body py-3">
                <div class="d-flex align-items-center">
                    <div class="avatar me-3" style="width: 50px; height: 50px; border-radius: 50%; background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); color: white; display: flex; align-items: center; justify-content: center; font-size: 1.5rem; font-weight: bold;">
                        { string([]rune(investigator.Name)[0]) }
                    </div>
                    <div>
                        <h4 class="mb-0 fw-bold">{ investigator.Name }</h4>
                        <p class="mb-0 text-secondary">{ investigator.Archetype.Name } { investigator.Occupation.Name }</p>
                    </div>
                    <div class="ms-auto d-flex">
                        <div class="info-pill mx-2 px-3 py-2 rounded-pill bg-light text-center">
                            <small class="d-block text-muted">Age</small>
                            <span class="fw-medium">{ strconv.Itoa(investigator.Age) }</span>
                        </div>
                        <div class="info-pill mx-2 px-3 py-2 rounded-pill bg-light text-center">
                            <small class="d-block text-muted">Origin</small>
                            <span class="fw-medium">{ investigator.Birthplace }</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tab navigation with new styling -->
        <div class="mb-4">
            <ul class="nav nav-pills nav-fill" id="skillsTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button
                        class="nav-link active fw-medium py-3"
                        id="archetype-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#archetype-skills"
                        type="button"
                        role="tab"
                        aria-controls="archetype-skills"
                        aria-selected="true"
                        style="border-radius: 0.75rem;"
                    >
                        <i class="bi bi-person-badge me-2"></i>Archetype Skills
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button
                        class="nav-link fw-medium py-3"
                        id="occupation-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#occupation-skills"
                        type="button"
                        role="tab"
                        aria-controls="occupation-skills"
                        aria-selected="false"
                        disabled
                        style="border-radius: 0.75rem;"
                    >
                        <i class="bi bi-briefcase me-2"></i>Occupation Skills
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button
                        class="nav-link fw-medium py-3"
                        id="general-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#general-skills"
                        type="button"
                        role="tab"
                        aria-controls="general-skills"
                        aria-selected="false"
                        disabled
                        style="border-radius: 0.75rem;"
                    >
                        <i class="bi bi-list-check me-2"></i>General Skills
                    </button>
                </li>
            </ul>
        </div>

        <!-- Tab content with improved styling -->
        <div class="tab-content" id="skillsTabContent">
            <!-- Archetype Skills Tab -->
            <div class="tab-pane fade show active" id="archetype-skills" role="tabpanel" aria-labelledby="archetype-tab">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3 class="mb-0 fw-bold" style="color: #6d6875;">
                        <i class="bi bi-person-badge me-2"></i>Archetype Skills
                    </h3>
                    <div class="points-display shadow-sm d-flex align-items-center p-2 px-3 rounded-pill">
                        <div class="me-3">
                            <span class="text-muted">Total:</span>
                            <span class="fw-bold ms-1 text-dark" id="archetype-points-total">
                                { strconv.Itoa(investigator.ArchetypePoints) }
                            </span>
                        </div>
                        <div class="points-remaining">
                            <span class="text-muted">Remaining:</span>
                            <span class="fw-bold ms-1" id="archetype-points" style="color: #b5838d;">
                                { strconv.Itoa(investigator.ArchetypePoints) }
                            </span>
                        </div>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="row g-3">
                        <!-- Archetype Skills (Alphabetically Sorted) -->
                        @renderArchetypeSkills(investigator)
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button
                        type="button"
                        class="btn btn-outline-secondary px-4 py-2"
                        style="border-radius: 0.75rem; transition: all 0.3s;"
                        onclick="characterUtils.goBackToAttributes()"
                    >
                        <i class="bi bi-arrow-left me-2"></i>Back to Attributes
                    </button>
                    <div class="transition-opacity" id="confirm-archetype-container">
                        <button
                            id="archetype-continue-btn"
                            type="button"
                            class="btn btn-lg px-4 py-2"
                            style="background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); color: white; border: none; border-radius: 0.75rem; transition: all 0.3s;"
                            onclick="navigateToTab('occupation')"
                        >
                            <i class="bi bi-arrow-right-circle me-2"></i>Continue to Occupation Skills
                        </button>
                    </div>
                </div>
            </div>

            <!-- Occupation Skills Tab -->
            <div class="tab-pane fade" id="occupation-skills" role="tabpanel" aria-labelledby="occupation-tab">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3 class="mb-0 fw-bold" style="color: #6d6875;">
                        <i class="bi bi-briefcase me-2"></i>Occupation Skills
                    </h3>
                    <div class="points-display shadow-sm d-flex align-items-center p-2 px-3 rounded-pill">
                        <div class="me-3">
                            <span class="text-muted">Total:</span>
                            <span class="fw-bold ms-1 text-dark" id="occupation-points-total">
                                { strconv.Itoa(investigator.OccupationPoints) }
                            </span>
                        </div>
                        <div class="points-remaining">
                            <span class="text-muted">Remaining:</span>
                            <span class="fw-bold ms-1" id="occupation-points" style="color: #b5838d;">
                                { strconv.Itoa(investigator.OccupationPoints) }
                            </span>
                        </div>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="row g-3">
                        <!-- Occupation Skills (Alphabetically Sorted) -->
                        @renderOccupationSkills(investigator)
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button
                        type="button"
                        class="btn btn-outline-secondary px-4 py-2"
                        style="border-radius: 0.75rem; transition: all 0.3s;"
                        onclick="navigateToTab('archetype')"
                    >
                        <i class="bi bi-arrow-left me-2"></i>Back to Archetype Skills
                    </button>
                    <div class="transition-opacity" id="confirm-occupation-container">
                        <button
                            id="occupation-continue-btn"
                            type="button"
                            class="btn btn-lg px-4 py-2"
                            style="background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); color: white; border: none; border-radius: 0.75rem; transition: all 0.3s;"
                            onclick="navigateToTab('general')"
                        >
                            <i class="bi bi-arrow-right-circle me-2"></i>Continue to General Skills
                        </button>
                    </div>
                </div>
            </div>

            <!-- General Skills Tab -->
            <div class="tab-pane fade" id="general-skills" role="tabpanel" aria-labelledby="general-tab">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3 class="mb-0 fw-bold" style="color: #6d6875;">
                        <i class="bi bi-list-check me-2"></i>General Skills
                    </h3>
                    <div class="points-display shadow-sm d-flex align-items-center p-2 px-3 rounded-pill">
                        <div class="me-3">
                            <span class="text-muted">Total:</span>
                            <span class="fw-bold ms-1 text-dark" id="general-points-total">
                                { strconv.Itoa(investigator.FreePoints) }
                            </span>
                        </div>
                        <div class="points-remaining">
                            <span class="text-muted">Remaining:</span>
                            <span class="fw-bold ms-1" id="general-points" style="color: #b5838d;">
                                { strconv.Itoa(investigator.FreePoints) }
                            </span>
                        </div>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="row g-3">
                        <!-- General Skills (Alphabetically Sorted) -->
                        @renderGeneralSkills(investigator)
                    </div>
                </div>

                <div class="d-flex justify-content-between">
                    <button
                        type="button"
                        class="btn btn-outline-secondary px-4 py-2"
                        style="border-radius: 0.75rem; transition: all 0.3s;"
                        onclick="navigateToTab('occupation')"
                    >
                        <i class="bi bi-arrow-left me-2"></i>Back to Occupation Skills
                    </button>
                    <div class="transition-opacity" id="confirm-general-container">
                        <button
                            id="finish-btn"
                            type="button"
                            class="btn btn-lg px-4 py-2"
                            style="background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%); color: white; border: none; border-radius: 0.75rem; transition: all 0.3s;"
                            hx-get={ fmt.Sprintf("/api/investigator/%s", investigator.ID) }
                            hx-target="#character-sheet"
                        >
                            <i class="bi bi-check-circle me-2"></i>Complete Character
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        .coc-sheet {
            font-family: 'Roboto', sans-serif;
            background-color: #fff;
            border-radius: 1rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.08);
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .skill-box {
            padding: 12px 15px;
            border-radius: 0.75rem;
            background-color: #f8f9fa;
            margin-bottom: 10px;
            transition: all 0.2s ease;
            border: 1px solid rgba(0,0,0,0.05);
        }
        
        .skill-box:hover {
            background-color: #fff;
            transform: translateY(-3px);
            box-shadow: 0 0.25rem 0.75rem rgba(0,0,0,0.1) !important;
            border-color: rgba(181, 131, 141, 0.2);
        }

        .skill-name-container {
            flex: 1;
            display: flex;
            align-items: baseline;
        }

        .skill-name {
            font-weight: 600;
            margin-right: 8px;
            color: #6d6875;
        }

        .skill-default {
            font-size: 0.8rem;
            color: #95a5a6;
        }

        .skill-values {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            min-width: 130px;
        }

        .skill-input {
            text-align: center;
            height: 38px;
            font-weight: 500;
            color: #6d6875;
            border-color: rgba(0,0,0,0.1);
        }
        
        .input-group-text {
            background-color: #f1f1f1;
            color: #95a5a6;
            border-color: rgba(0,0,0,0.1);
            font-weight: 500;
        }
        
        .btn-increment, .btn-decrement {
            background-color: #f1f1f1;
            border-color: rgba(0,0,0,0.1);
            color: #6d6875;
            transition: all 0.2s;
        }
        
        .btn-increment:hover, .btn-decrement:hover {
            background-color: #e1e1e1;
        }

        .value-displays {
            display: flex;
            font-size: 0.8rem;
            color: #95a5a6;
            margin-top: 5px;
            justify-content: center;
            width: 100%;
        }

        .half-value, .fifth-value {
            min-width: 20px;
            text-align: center;
            font-weight: 500;
        }

        .divider {
            margin: 0 8px;
            color: #ddd;
        }

        .points-display {
            background-color: #f8f9fa;
            border-radius: 50px;
            border: 1px solid rgba(0,0,0,0.05);
        }
        
        /* Animation for points remaining */
        .points-remaining span:last-child {
            transition: color 0.3s;
        }
        
        /* Tab styling */
        .nav-pills .nav-link {
            color: #6c757d;
            background-color: #f8f9fa;
            border: 1px solid rgba(0,0,0,0.05);
            margin: 0 5px;
            transition: all 0.3s ease;
        }
        
        .nav-pills .nav-link:hover:not([disabled]) {
            background-color: #f0f0f0;
            transform: translateY(-2px);
        }
        
        .nav-pills .nav-link.active {
            background: linear-gradient(135deg, #6d6875 0%, #b5838d 100%);
            color: white;
            box-shadow: 0 4px 10px rgba(181, 131, 141, 0.3);
            transform: translateY(-2px);
        }
        
        .nav-pills .nav-link[disabled] {
            color: #adb5bd;
            cursor: not-allowed;
        }
        
        /* Button styling */
        .btn-outline-secondary {
            color: #6d6875;
            border-color: #6d6875;
        }
        
        .btn-outline-secondary:hover {
            background-color: #6d6875;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(109, 104, 117, 0.2);
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        /* Remove spinner buttons from number inputs */
        input[type=number]::-webkit-inner-spin-button,
        input[type=number]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        input[type=number] {
            -moz-appearance: textfield;
        }

        .transition-opacity {
            transition: opacity 0.3s ease;
        }
        
        /* Focus states */
        .form-control:focus, .btn:focus {
            box-shadow: 0 0 0 0.25rem rgba(181, 131, 141, 0.25);
            border-color: #b5838d;
        }
        
        /* Progress steps styling */
        .step-indicator {
            position: relative;
            z-index: 1;
        }
        
        .step-circle {
            transition: all 0.3s;
        }
        
        .step-label {
            transition: all 0.3s;
        }
        
        .step-indicator.completed .step-label {
            color: #6d6875;
        }
        
        .step-indicator.active .step-label {
            color: #6d6875;
            font-weight: 500;
        }
        
        /* Character info styling */
        .info-pill {
            transition: all 0.3s ease;
            border: 1px solid rgba(0,0,0,0.05);
        }
        
        .info-pill:hover {
            background-color: #f0e6ea !important;
            transform: translateY(-2px);
        }
        
        /* Flash animation for changes */
        @keyframes flash-highlight {
            0% { background-color: rgba(181, 131, 141, 0.3); }
            100% { background-color: transparent; }
        }
        
        .flash-highlight {
            animation: flash-highlight 0.8s ease-out;
        }
    </style>

    <script>
        // Define global navigation function
        function navigateToTab(tabName) {
            // Enable the tab if it's not the archetype tab (which is always enabled)
            if (tabName !== 'archetype') {
                document.getElementById(tabName + '-tab').disabled = false;
            }

            // Add a slight delay before switching tabs for better animation
            setTimeout(() => {
                // Switch to the tab
                const tab = new bootstrap.Tab(document.getElementById(tabName + '-tab'));
                tab.show();
                
                // Scroll to top of the tab content
                document.getElementById(tabName + '-skills').scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }, 100);
        }

        // Extend the characterUtils object with navigation functionality
        if (!window.characterUtils) {
            window.characterUtils = {};
        }
        
        // Function to go back to attributes page
        window.characterUtils.goBackToAttributes = function() {
            // Use HTMX to navigate back to the attributes page
            htmx.ajax('GET', '/api/investigator/attributes/' + '{ investigator.ID }', {
                target: '#character-sheet',
                swap: 'innerHTML'
            });
        };

        // Function to increment or decrement skill value using buttons
        window.characterUtils.adjustSkillValue = function(btn, increment) {
            const input = btn.closest('.input-group').querySelector('.skill-input');
            const currentValue = parseInt(input.value) || 0;
            
            // Increment or decrement the value
            input.value = currentValue + (increment ? 1 : -1);
            
            // Trigger the change event to update calculations
            input.dispatchEvent(new Event('change'));
        };

        // Immediately extend the characterUtils object with our enhanced functions
        // This ensures the functions are available before any input events occur
        (function() {
            // Store the original recalculateValues function if it exists
            const originalRecalculateValues = window.characterUtils.recalculateValues || function() {};

            // Replace with our enhanced version
            window.characterUtils.recalculateValues = function(input, type) {
                if (type === 'skill') {
                    const skillName = input.dataset.skill;
                    const value = parseInt(input.value) || 0;
                    const prevValue = parseInt(input.dataset.skillvalue) || 0;
                    const defaultValue = parseInt(input.dataset.skilldefault) || 0;
                    const skillType = input.dataset.skilltype || 'archetype';

                    // Apply max limit
                    if (value > 90) {
                        input.value = 90;
                        return;
                    }
                    
                    // Apply min limit (default value)
                    if (value < defaultValue) {
                        input.value = defaultValue;
                        return;
                    }

                    // Calculate difference
                    const difference = value - prevValue;
                    
                    // Skip if there's no change
                    if (difference === 0) return;

                    // Get proper points element
                    let pointsId = "";
                    let confirmId = "";

                    if (skillType === "archetype" || document.querySelector('#archetype-skills.active')) {
                        pointsId = "archetype-points";
                        confirmId = "confirm-archetype-container";
                    } else if (skillType === "occupation" || document.querySelector('#occupation-skills.active')) {
                        pointsId = "occupation-points";
                        confirmId = "confirm-occupation-container";
                    } else if (skillType === "general" || document.querySelector('#general-skills.active')) {
                        pointsId = "general-points";
                        confirmId = "confirm-general-container";
                    }

                    // Get points element and current remaining points
                    const pointsElement = document.getElementById(pointsId);

                    if (pointsElement) {
                        const currentPoints = parseInt(pointsElement.textContent) || 0;
                        const newPoints = currentPoints - difference;

                        // Don't allow negative points
                        if (newPoints < 0) {
                            input.value = prevValue;
                            
                            // Visual feedback for error
                            input.classList.add('is-invalid');
                            
                            // Remove invalid class after a short delay
                            setTimeout(() => {
                                input.classList.remove('is-invalid');
                            }, 800);
                            
                            return;
                        }

                        // Update points display with visual feedback
                        pointsElement.textContent = newPoints;
                        
                        // Add color coding based on remaining points
                        if (newPoints < 10) {
                            pointsElement.style.color = '#e74c3c';
                        } else {
                            pointsElement.style.color = '#b5838d';
                        }
                        
                        // Highlight the skill box that was changed
                        const skillBox = input.closest('.skill-box');
                        skillBox.classList.add('flash-highlight');
                        setTimeout(() => {
                            skillBox.classList.remove('flash-highlight');
                        }, 800);

                        // Update skill value tracking
                        input.dataset.skillvalue = value;

                        // Update half and fifth values
                        const container = input.closest('.skill-values');
                        const halfSpan = container.querySelector('[data-half]');
                        const fifthSpan = container.querySelector('[data-fifth]');

                        if (halfSpan) halfSpan.textContent = Math.floor(value / 2);
                        if (fifthSpan) fifthSpan.textContent = Math.floor(value / 5);

                        // Show continue button if all points are used
                        const confirmContainer = document.getElementById(confirmId);
                        if (confirmContainer && newPoints === 0) {
                            confirmContainer.style.opacity = "1";
                            confirmContainer.style.pointerEvents = "auto";
                        }
                    }
                }

                // Call original function to update server if it exists
                if (typeof originalRecalculateValues === 'function') {
                    originalRecalculateValues.call(window.characterUtils, input, type);
                }
            };
        })();

        // Add additional functionality when the DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Ensure all tab continue buttons are visible
            document.getElementById('confirm-archetype-container').style.opacity = "1";
            document.getElementById('confirm-archetype-container').style.pointerEvents = "auto";
            document.getElementById('confirm-occupation-container').style.opacity = "1";
            document.getElementById('confirm-occupation-container').style.pointerEvents = "auto";
            document.getElementById('confirm-general-container').style.opacity = "1";
            document.getElementById('confirm-general-container').style.pointerEvents = "auto";
            
            // Add tab switching functionality to preserve values
            document.querySelectorAll('button[data-bs-toggle="tab"]').forEach(button => {
                button.addEventListener('shown.bs.tab', function (event) {
                    // If we need additional tab switching logic, we can add it here
                });
            });
            
            // Add hover effects to skill boxes
            document.querySelectorAll('.skill-box').forEach(box => {
                box.addEventListener('mouseenter', function() {
                    this.style.backgroundColor = '#f0f0f0';
                });
                box.addEventListener('mouseleave', function() {
                    this.style.backgroundColor = '#f8f9fa';
                });
            });
            
            // Initialize any skill inputs
            document.querySelectorAll('.skill-input').forEach(input => {
                // Add focus/blur effects
                input.addEventListener('focus', function() {
                    this.closest('.skill-box').style.borderColor = '#b5838d';
                });
                
                input.addEventListener('blur', function() {
                    this.closest('.skill-box').style.borderColor = 'rgba(0,0,0,0.05)';
                });
            });
        });
    </script>
}

// Helper function to render a single skill box
templ renderSkillBox(skillObj models.Skill, skillType string) {
    <div class="col-md-6 col-lg-4 mb-2">
        <div class="skill-box shadow-sm">
            <div class="d-flex justify-content-between align-items-center">
                <div class="skill-name-container">
                    <span class="skill-name">{ skillObj.Name }</span>
                    <span class="skill-default">({ strconv.Itoa(skillObj.Default) }%)</span>
                </div>
                <div class="skill-values">
                    <div class="input-group">
                        <button 
                            type="button" 
                            class="btn btn-decrement input-group-text" 
                            onclick="characterUtils.adjustSkillValue(this, false)"
                        >
                            <i class="bi bi-dash"></i>
                        </button>
                        <input
                            type="number"
                            class="form-control skill-input"
                            value={ strconv.Itoa(skillObj.Value) }
                            data-skill={ skillObj.Name }
                            data-skillvalue={ strconv.Itoa(skillObj.Value) }
                            data-skilldefault={ strconv.Itoa(skillObj.Default) }
                            data-skilltype={ skillType }
                            onchange="characterUtils.recalculateValues(this, 'skill')"
                            min={ strconv.Itoa(skillObj.Default) }
                            max="90"
                        />
                        <button 
                            type="button" 
                            class="btn btn-increment input-group-text" 
                            onclick="characterUtils.adjustSkillValue(this, true)"
                        >
                            <i class="bi bi-plus"></i>
                        </button>
                        <span class="input-group-text">%</span>
                    </div>
                    <div class="value-displays">
                        <span class="half-value" data-half>{ strconv.Itoa(skillObj.Value/2) }</span>
                        <span class="divider">|</span>
                        <span class="fifth-value" data-fifth>{ strconv.Itoa(skillObj.Value/5) }</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

// Render archetype skills (alphabetically sorted)
templ renderArchetypeSkills(investigator *models.Investigator) {
    // Create a slice to hold valid skills for sorting
    @templ.Raw("<!-- Archetype Skills Section -->")
    for _, skillName := range getSortedSkillNames(investigator, investigator.Archetype.Skills) {
        @renderSkillBox(investigator.Skills[skillName], "archetype")
    }
}

// Render occupation skills (alphabetically sorted)
templ renderOccupationSkills(investigator *models.Investigator) {
    // Create a slice to hold valid skills for sorting
    @templ.Raw("<!-- Occupation Skills Section -->")
    for _, skillName := range getSortedSkillNames(investigator, *investigator.GetOccupationSkills()) {
        @renderSkillBox(investigator.Skills[skillName], "occupation")
    }
}

// Render general skills (alphabetically sorted)
templ renderGeneralSkills(investigator *models.Investigator) {
    // Create a slice to hold valid skills for sorting
    @templ.Raw("<!-- General Skills Section -->")
    for _, skillObj := range getSortedSkills(investigator) {
        @renderSkillBox(skillObj, "general")
    }
}

// Helper function to sort skill names
func getSortedSkillNames(investigator *models.Investigator, skills []string) []string {
    // Create a slice to hold valid skills
    var validSkills []string
    
    // Add skills to the valid skills slice
    for _, skillName := range skills {
        skillObj := investigator.Skills[skillName]
        if skillObj.Name != "" && skillObj.Name != "Dodge_Copy" && skillObj.Base == 0 {
            validSkills = append(validSkills, skillName)
        }
    }
    
    // Sort skills alphabetically by name
    sort.Slice(validSkills, func(i, j int) bool {
        return investigator.Skills[validSkills[i]].Name < investigator.Skills[validSkills[j]].Name
    })
    
    return validSkills
}

// Helper function to get all sorted skills
func getSortedSkills(investigator *models.Investigator) []models.Skill {
    // Create a slice to hold valid skills
    var validSkills []models.Skill
    
    // Add skills to the valid skills slice
    for _, skill := range investigator.Skills {
        if skill.Name != "" && skill.Name != "Dodge_Copy" && skill.Base == 0 {
            validSkills = append(validSkills, skill)
        }
    }
    
    // Sort skills alphabetically by name
    sort.Slice(validSkills, func(i, j int) bool {
        return validSkills[i].Name < validSkills[j].Name
    })
    
    return validSkills
}