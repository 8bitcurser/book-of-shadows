// views/components.templ
package views

import "book-of-shadows/models"
import "encoding/json"
import "strconv"
import "sort"

templ Home() {
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta charset="UTF-8"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title>Call of Cthulhu Character Generator</title>
            <script src="https://unpkg.com/htmx.org@1.9.10"></script>
            <script src="https://cdn.tailwindcss.com"></script>
            <style>
                body {
                    background-color: #f3f4f6;
                }
            </style>
        </head>
        <body class="min-h-screen py-8">
            <div class="container mx-auto px-4">
                <header class="text-center mb-8">
                    <h1 class="text-4xl font-bold mb-2">Call of Cthulhu Character Generator</h1>
                    <p class="text-gray-600">Generate investigators for your cosmic horror adventures</p>
                </header>

                <div class="flex justify-center gap-4 mb-8">
                    <select
                        id="gameMode"
                        class="rounded border p-2 bg-white"
                    >
                        <option value="classic">Classic Mode</option>
                        <option value="pulp">Pulp Mode</option>
                    </select>

                    <button
                        hx-get="/api/generate"
                        hx-target="#character-sheet"
                        hx-vals='js:{mode: document.getElementById("gameMode").value}'
                        class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                    >
                        Generate Character
                    </button>

                    <button
                        onclick="exportPDF()"
                        class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                    >
                        Export PDF
                    </button>

                    <button
                        onclick="exportJSON()"
                        class="bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700"
                    >
                        Save JSON
                    </button>
                </div>

                <div id="character-sheet">
                    <p class="text-center text-gray-500">
                        Click "Generate Character" to create a new investigator
                    </p>
                </div>
            </div>

        <script>
            function getCurrentCharacter() {
                const hiddenInput = document.getElementById('currentCharacter');
                if (!hiddenInput || !hiddenInput.value) {
                    return null;
                }
                return JSON.parse(hiddenInput.value);
            }

            async function exportPDF() {
                const character = getCurrentCharacter();
                if (!character) {
                    alert('Please generate a character first');
                    return;
                }

                try {
                    const response = await fetch('/api/export-pdf', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(character)
                    });

                    if (!response.ok) throw new Error('Failed to generate PDF');

                    const blob = await response.blob();
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = 'investigator.pdf';
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                } catch (error) {
                    console.error('Error exporting PDF:', error);
                    alert('Failed to generate PDF');
                }
            }

            function exportJSON() {
                const character = getCurrentCharacter();
                if (!character) {
                    alert('Please generate a character first');
                    return;
                }

                const blob = new Blob([JSON.stringify(character, null, 2)], {
                    type: 'application/json'
                });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'investigator.json';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            }

            // No need for the htmx.on handler anymore since we're using the hidden input
        </script>
    </body>
    </html>
}


templ CharacterSheet(investigator *models.Investigator) {
    @hidden(investigator)
    <div class="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
        <div class="border-b-2 pb-4 mb-6">
            <h1 class="text-3xl font-bold text-gray-800">{ investigator.Name }</h1>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
                <div>
                    <p class="text-sm text-gray-600">Occupation</p>
                    <p class="font-medium">{ investigator.Occupation.Name }</p>
                </div>
                <div>
                    <p class="text-sm text-gray-600">Age</p>
                    <p class="font-medium">{ strconv.Itoa(investigator.Age) }</p>
                </div>
                <div>
                    <p class="text-sm text-gray-600">Residence</p>
                    <p class="font-medium">{ investigator.Residence }</p>
                </div>
                <div>
                    <p class="text-sm text-gray-600">Birthplace</p>
                    <p class="font-medium">{ investigator.Birthplace }</p>
                </div>
            </div>
        </div>

        <div class="grid md:grid-cols-3 gap-6">
            <div class="bg-gray-50 p-4 rounded-lg md:col-span-2">
                <h2 class="text-xl font-bold mb-4 text-gray-700">Attributes</h2>
                <div class="grid grid-cols-2 gap-x-6 gap-y-2">
                    for key, attr := range investigator.Attributes {
                        <div class="flex justify-between items-center py-1 border-b border-gray-200 last:border-0">
                            <span class="font-medium text-gray-600 w-[40%]">{ key }</span>
                            <div class="flex items-center w-[60%] justify-end">
                                <span class="tooltip cursor-help w-[50px] text-right" title="Regular">{ strconv.Itoa(attr.Value) }</span>
                                <span class="text-gray-300 w-[20px] text-center">|</span>
                                <span class="tooltip cursor-help w-[50px] text-right" title="Half value">{ strconv.Itoa(attr.Value/2) }</span>
                                <span class="text-gray-300 w-[20px] text-center">|</span>
                                <span class="tooltip cursor-help w-[50px] text-right" title="Fifth value">{ strconv.Itoa(attr.Value/5) }</span>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="bg-gray-50 p-4 rounded-lg">
                <h2 class="text-xl font-bold mb-4 text-gray-700">Combat</h2>
                <div class="space-y-2">
                    <div class="flex justify-between items-center">
                        <span class="font-medium text-gray-600">Movement</span>
                        <span>{ strconv.Itoa(investigator.Move) }</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="font-medium text-gray-600">Build</span>
                        <span>{ investigator.Build }</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="font-medium text-gray-600">DB</span>
                        <span>{ investigator.DamageBonus }</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-6">
            <h2 class="text-xl font-bold mb-4 text-gray-700">Skills</h2>
            <div class="bg-gray-50 p-4 rounded-lg">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2">
                    for _, skill := range sortSkills(investigator.Skills) {
                        if skill.Name != "" && skill.Name != "Dodge_Copy" {
                            <div class="flex justify-between items-center py-1 border-b border-gray-200 last:border-0">
                                <span class="font-medium text-gray-600 w-[40%]">{ skill.Name }</span>
                                <div class="flex items-center w-[60%] justify-end">
                                    <span class="tooltip cursor-help w-[50px] text-right" title="Regular">{ strconv.Itoa(skill.Value) }%</span>
                                    <span class="text-gray-300 w-[20px] text-center">|</span>
                                    <span class="tooltip cursor-help w-[50px] text-right" title="Half value">{ strconv.Itoa(skill.Value/2) }%</span>
                                    <span class="text-gray-300 w-[20px] text-center">|</span>
                                    <span class="tooltip cursor-help w-[50px] text-right" title="Fifth value">{ strconv.Itoa(skill.Value/5) }%</span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        if len(investigator.Talents) > 0 {
            <div class="mt-6">
                <h2 class="text-xl font-bold mb-4 text-gray-700">Pulp Talents</h2>
                <div class="space-y-4">
                    for _, talent := range investigator.Talents {
                        <div class="bg-gray-50 p-3 rounded">
                            <h3 class="font-bold text-gray-700">{ talent.Name }</h3>
                            <p class="text-gray-600 text-sm mt-1">{ talent.Description }</p>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <style>
        .tooltip {
            position: relative;
        }
        .tooltip:hover::after {
            content: attr(title);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            padding: 4px 8px;
            background: #1a202c;
            color: white;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 10;
        }
    </style>
}

templ hidden(investigator *models.Investigator) {
    <input
        type="hidden"
        id="currentCharacter"
        value={ mustJson(investigator) }
    />
}

func mustJson(v interface{}) string {
    b, err := json.Marshal(v)
    if err != nil {
        return ""
    }
    return string(b)
}
type skillItem struct {
    Name  string
    Value int
}

func sortSkills(skills map[string]models.Skill) []models.Skill {
    // Create a slice to hold the skills
    var skillSlice []models.Skill

    // Convert map to slice
    for _, skill := range skills {
        if skill.Name != "" && skill.Name != "Dodge_Copy" {
            skillSlice = append(skillSlice, skill)
        }
    }

    // Sort the slice by name
    sort.Slice(skillSlice, func(i, j int) bool {
        return skillSlice[i].Name < skillSlice[j].Name
    })

    return skillSlice
}