// views/components.templ
package views

import "book-of-shadows/models"
import "encoding/json"
import "strconv"
import "sort"

templ Home() {
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta charset="UTF-8"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title>Call of Cthulhu Character Generator</title>
            <script src="https://unpkg.com/htmx.org@1.9.10"></script>
            <script src="https://cdn.tailwindcss.com"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
            <script src="/static/character-utils.js"></script>

        </head>
        <body class="min-h-screen py-8">
            <div class="container mx-auto px-4">
                <header class="text-center mb-8">
                    <h1 class="text-4xl font-bold mb-2">Call of Cthulhu Character Generator</h1>
                    <p class="text-gray-600">Generate investigators for your cosmic horror adventures</p>
                </header>

                <div class="flex justify-center gap-4 mb-8">
                    <select
                        id="gameMode"
                        class="rounded border p-2 bg-white"
                    >
                        <option value="classic">Classic Mode</option>
                        <option value="pulp" selected>Pulp Mode</option>
                    </select>

                    <button
                        hx-get="/api/generate"
                        hx-target="#character-sheet"
                        hx-vals='js:{mode: document.getElementById("gameMode").value}'
                        class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                    >
                        Generate Character
                    </button>

                    <!--<button id="exportPdfBtn" class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700">Export PDF</button>-->

                    <button
                        id="exportPdfPrimeBtn"
                        class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                    >
                        Export PDF
                    </button>

                    <button
                        id="exportJsonBtn"
                        class="bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700"
                    >
                        Save JSON
                    </button>

                    <label class="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 cursor-pointer">
                        Load JSON
                        <input
                            type="file"
                            accept=".json"
                            id="loadJsonInput"
                            class="hidden"
                        />
                    </label>
                </div>

                <div id="character-sheet">
                    <p class="text-center text-gray-500">
                        Click "Generate Character" to create a new investigator
                    </p>
                </div>
            </div>
        </body>
    </html>
}


templ CharacterSheet(investigator *models.Investigator) {
    @hidden(investigator)
    <div id="character-sheet" class="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
        <div class="first-page">
            <div class="border-b-2 pb-4 mb-6">
                <input
                    type="text"
                    class="text-3xl font-bold text-gray-800 w-full border-b border-transparent hover:border-gray-300 focus:border-gray-500 focus:outline-none mb-4 bg-transparent"
                    value={ investigator.Name }
                    data-field="name"
                    onchange="characterUtils.updatePersonalInfo(this)"
                />
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
                    <div>
                        <p class="text-sm text-gray-600">Occupation</p>
                        <p class="font-medium" data-field="occupation">{ investigator.Occupation.Name }</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Age</p>
                        <input
                            type="number"
                            class="font-medium w-20 bg-transparent border-b border-transparent hover:border-gray-300 focus:border-gray-500 focus:outline-none"
                            value={ strconv.Itoa(investigator.Age) }
                            data-field="age"
                            onchange="characterUtils.updatePersonalInfo(this)"
                        />
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Residence</p>
                        <input
                            type="text"
                            class="font-medium w-full bg-transparent border-b border-transparent hover:border-gray-300 focus:border-gray-500 focus:outline-none"
                            value={ investigator.Residence }
                            data-field="residence"
                            onchange="characterUtils.updatePersonalInfo(this)"
                        />
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Birthplace</p>
                        <input
                            type="text"
                            class="font-medium w-full bg-transparent border-b border-transparent hover:border-gray-300 focus:border-gray-500 focus:outline-none"
                            value={ investigator.Birthplace }
                            data-field="birthplace"
                            onchange="characterUtils.updatePersonalInfo(this)"
                        />
                    </div>
                </div>
            </div>
            <div class="grid md:grid-cols-3 gap-6">
                <div class="bg-gray-50 p-4 rounded-lg md:col-span-2">
                    <h2 class="text-xl font-bold mb-4 text-gray-700">Attributes</h2>
                    <div class="grid grid-cols-2 gap-x-6 gap-y-2">
                        for key, attr := range investigator.Attributes {
                            <div class="flex justify-between items-center py-1 border-b border-gray-200 last:border-0">
                                <span class="font-medium text-gray-600 w-[40%]">{ key }</span>
                                <div class="flex items-center w-[60%] justify-end">
                                    <span class="tooltip cursor-help w-[50px] text-right" data-attr={key} title="Regular">{ strconv.Itoa(attr.Value) }</span>
                                    <span class="text-gray-300 w-[20px] text-center">|</span>
                                    <span class="tooltip cursor-help w-[50px] text-right" title="Half value">{ strconv.Itoa(attr.Value/2) }</span>
                                    <span class="text-gray-300 w-[20px] text-center">|</span>
                                    <span class="tooltip cursor-help w-[50px] text-right" title="Fifth value">{ strconv.Itoa(attr.Value/5) }</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg">
                    <h2 class="text-xl font-bold mb-4 text-gray-700">Combat</h2>
                    <div class="space-y-2">
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">Movement</span>
                            <span>{ strconv.Itoa(investigator.Move) }</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">Build</span>
                            <span>{ investigator.Build }</span>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">DB</span>
                            <span>{ investigator.DamageBonus }</span>
                        </div>
                    </div>
                </div>
            </div>
            if len(investigator.Talents) > 0 {
                <div class="mt-6">
                    <h2 class="text-xl font-bold mb-4 text-gray-700">Pulp Talents</h2>
                    <div class="space-y-4">
                        for _, talent := range investigator.Talents {
                            <div class="bg-gray-50 p-3 rounded">
                                <h3 class="font-bold text-gray-700">{ talent.Name }</h3>
                                <p class="text-gray-600 text-sm mt-1">{ talent.Description }</p>
                            </div>
                        }
                    </div>
                </div>
            }

        </div>

        <div class="second-page mt-6 pt-0">
            <div class="mt-0">
                <h2 class="text-xl font-bold mb-4 text-gray-700">Skills</h2>
                <div class="bg-gray-50 p-4 rounded-lg">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2">
                        for _, skill := range sortSkills(investigator.Skills) {
                            if skill.Name != "" && skill.Name != "Dodge_Copy" {
                                <div class="flex justify-between items-center py-1 border-b border-gray-200 last:border-0">
                                    <span class="font-medium text-gray-600 w-[40%]">{ skill.Name }</span>
                                    <div class="flex items-center w-[60%] justify-end">
                                        <input
                                            type="number"
                                            class="tooltip cursor-pointer w-[50px] text-right bg-white border rounded px-1"
                                            value={ strconv.Itoa(skill.Value) }
                                            data-skill={ skill.Name }
                                            onchange="characterUtils.recalculateValues(this, 'skill')"
                                            title="Regular"
                                            min="0"
                                        />
                                        <span class="text-gray-300 w-[20px] text-center">|</span>
                                        <span class="tooltip cursor-help w-[50px] text-right" title="Half value" data-half>{ strconv.Itoa(skill.Value/2) }</span>
                                        <span class="text-gray-300 w-[20px] text-center">|</span>
                                        <span class="tooltip cursor-help w-[50px] text-right" title="Fifth value" data-fifth>{ strconv.Itoa(skill.Value/5) }</span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        @media print {
            //.second-page {
              //  page-break-before: always;
            //}
            .second-page {
                        margin-top: 0 !important;
                        padding-top: 0 !important;
                    }

                    .second-page .grid {
                        gap: 0.25rem !important; // Tighter spacing for skills
                    }
            /* Rest of your print styles */
            #character-sheet {
                margin: 0;
                padding: 20px;
            }

            .tooltip::after {
                display: none !important;
            }

            * {
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
            }
        }
        .tooltip {
            position: relative;
        }
        .tooltip:hover::after {
            content: attr(title);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            padding: 4px 8px;
            background: #1a202c;
            color: white;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 10;
        }
    </style>
}

templ hidden(investigator *models.Investigator) {
    <input
        type="hidden"
        id="currentCharacter"
        value={ mustJson(investigator) }
    />
}

func mustJson(v interface{}) string {
    b, err := json.Marshal(v)
    if err != nil {
        return ""
    }
    return string(b)
}
type skillItem struct {
    Name  string
    Value int
}

func sortSkills(skills map[string]models.Skill) []models.Skill {
    // Create a slice to hold the skills
    var skillSlice []models.Skill

    // Convert map to slice
    for _, skill := range skills {
        if skill.Name != "" && skill.Name != "Dodge_Copy" {
            skillSlice = append(skillSlice, skill)
        }
    }

    // Sort the slice by name
    sort.Slice(skillSlice, func(i, j int) bool {
        return skillSlice[i].Name < skillSlice[j].Name
    })

    return skillSlice
}