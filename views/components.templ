// views/components.templ
package views

import "book-of-shadows/models"
import "encoding/json"
import "strconv"
import "sort"
import "strings"
import "fmt"

templ Home() {
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta charset="UTF-8"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title>Corbitt Files</title>
            <script src="https://unpkg.com/htmx.org@1.9.10"></script>
            <script src="https://cdn.tailwindcss.com"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
            <script src="/static/character-utils.js"></script>

        </head>
        <body class="min-h-screen py-8">
            <div class="container mx-auto px-4">
                <header class="text-center mb-8">
                    <h1 class="text-4xl font-bold mb-2">Corbitt Files Investigator Generator</h1>
                    <p class="text-gray-600">Generate investigators for your cosmic horror adventures</p>
                </header>

                <div class="flex justify-center gap-4 mb-8">
                    <button
                        hx-get="/api/generate"
                        hx-target="#character-sheet"
                        hx-vals='js:{mode: "pulp"}'
                        class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                    >
                        Generate Character
                    </button>
                    <button
                        hx-get="/api/investigator/list"
                        hx-target="#character-sheet"
                        class="bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700"
                    >
                        List Investigators
                    </button>

                </div>

                <div id="character-sheet">
                    <p class="text-center text-gray-500">
                        Click "Generate Character" to create a new investigator
                    </p>
                </div>
            </div>
        </body>
    </html>
}


templ CharacterSheet(investigator *models.Investigator) {
    @hidden(investigator)
    <div id="character-sheet" class="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-lg">
        <div class="first-page">
            <div class="border-b-2 pb-4 mb-6">
                <input
                    type="text"
                    id={ investigator.ID }
                    class="text-3xl font-bold text-gray-800 w-full border-b border-transparent hover:border-gray-300 focus:border-gray-500 focus:outline-none mb-4 bg-transparent"
                    value={ investigator.Name }
                    data-field="Name"
                    onchange="characterUtils.updatePersonalInfo(this)"
                />
                <div class="grid grid-cols-2 md:grid-cols-5 gap-5 mt-5">
                    <div>
                        <p class="text-sm text-gray-600">Occupation</p>
                        <p class="font-medium" data-field="occupation">{ investigator.Occupation.Name }</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Archetype</p>
                        <p class="font-medium" data-field="archetype">{ investigator.Archetype.Name }</p>
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Age</p>
                        <input
                            type="number"
                            class="font-medium w-20 bg-transparent border-b border-transparent hover:border-gray-300 focus:border-gray-500 focus:outline-none"
                            value={ strconv.Itoa(investigator.Age) }
                            data-field="Age"
                            onchange="characterUtils.updatePersonalInfo(this)"
                        />
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Residence</p>
                        <input
                            type="text"
                            class="font-medium w-full bg-transparent border-b border-transparent hover:border-gray-300 focus:border-gray-500 focus:outline-none"
                            value={ investigator.Residence }
                            data-field="Residence"
                            onchange="characterUtils.updatePersonalInfo(this)"
                        />
                    </div>
                    <div>
                        <p class="text-sm text-gray-600">Birthplace</p>
                        <input
                            type="text"
                            class="font-medium w-full bg-transparent border-b border-transparent hover:border-gray-300 focus:border-gray-500 focus:outline-none"
                            value={ investigator.Birthplace }
                            data-field="Birthplace"
                            onchange="characterUtils.updatePersonalInfo(this)"
                        />
                    </div>
                </div>
            </div>
            <div class="grid md:grid-cols-3 gap-6">
                <div class="bg-gray-50 p-4 rounded-lg md:col-span-2">
                    <h2 class="text-xl font-bold mb-4 text-gray-700">Attributes</h2>
                    <div class="grid grid-cols-2 gap-x-6 gap-y-2">
                        for _, attr := range investigator.Attributes {
                            if (!strings.HasPrefix(attr.Name, "Current")) {
                                <div class="flex justify-between items-center py-1 border-b border-gray-200 last:border-0">
                                    <span class="font-medium text-gray-600 w-[40%]">{ attr.Name }</span>
                                    <div class="flex items-center w-[60%] justify-end">
                                        <span class="tooltip cursor-help w-[50px] text-right" data-attr={attr.Name} title="Regular">{ strconv.Itoa(attr.Value) }</span>
                                        <span class="text-gray-300 w-[20px] text-center">|</span>
                                        <span class="tooltip cursor-help w-[50px] text-right" title="Half value" data-half>{ strconv.Itoa(attr.Value/2) }</span>
                                        <span class="text-gray-300 w-[20px] text-center">|</span>
                                        <span class="tooltip cursor-help w-[50px] text-right" title="Fifth value" data-fifth>{ strconv.Itoa(attr.Value/5) }</span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg">
                    <h2 class="text-xl font-bold mb-4 text-gray-700">Combat</h2>
                    <div class="space-y-2">
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">HP</span>
                            <input
                                type="number"
                                class="cursor-pointer w-[50px] text-left bg-white border rounded px-1"
                                value={ strconv.Itoa(investigator.Attributes["HitPoints"].Value) }
                                data-attr="HitPoints"
                                title="CurrentHP"
                                min="0"
                                onchange="characterUtils.recalculateValues(this, 'attribute')"
                            />
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">MP</span>
                            <input
                                type="number"
                                class="cursor-pointer w-[50px] text-left bg-white border rounded px-1"
                                value={ strconv.Itoa(investigator.Attributes["MagicPoints"].Value) }
                                data-attr="MagicPoints"
                                title="CurrentMP"
                                min="0"
                                onchange="characterUtils.recalculateValues(this, 'attribute')"
                            />
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">Luck</span>
                            <input
                                type="number"
                                class="cursor-pointer w-[50px] text-left bg-white border rounded px-1"
                                value={ strconv.Itoa(investigator.Attributes["Luck"].Value) }
                                data-attr="Luck"
                                title="CurrentLuck"
                                min="0"
                                onchange="characterUtils.recalculateValues(this, 'attribute')"
                            />
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">Sanity</span>
                            <input
                                type="number"
                                class="cursor-pointer w-[50px] text-left bg-white border rounded px-1"
                                value={ strconv.Itoa(investigator.Attributes["Sanity"].Value) }
                                data-attr="Sanity"
                                title="CurrentSanity"
                                onchange="characterUtils.recalculateValues(this, 'attribute')"
                                min="0"
                            />
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">Movement</span>
                            <p data-field="move">{ strconv.Itoa(investigator.Move) }</p>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">Build</span>
                            <p data-field="build">{ investigator.Build }</p>
                        </div>
                        <div class="flex justify-between items-center">
                            <span class="font-medium text-gray-600">DB</span>
                            <p data-field="dmgbonus">{ investigator.DamageBonus }</p>
                        </div>
                    </div>
                </div>
            </div>
            if len(investigator.Talents) > 0 {
                <div class="mt-6">
                    <h2 class="text-xl font-bold mb-4 text-gray-700">Pulp Talents</h2>
                    <div class="space-y-4" data-field="talents">
                        for _, talent := range investigator.Talents {
                            <div class="bg-gray-50 p-3 rounded">
                                <h3 class="font-bold text-gray-700">{ talent.Name }</h3>
                                <p class="text-gray-600 text-sm mt-1">{ talent.Description }</p>
                            </div>
                        }
                    </div>
                </div>
            }

        </div>

        <div class="second-page mt-6 pt-0">
            <div class="mt-0">
                <h2 class="text-xl font-bold mb-4 text-gray-700">Skills</h2>

                <div class="flex gap-4 mb-4">
                    <div class="bg-gray-100 px-4 py-2 rounded-md">
                        <span class="text-sm text-gray-600">Occupation Points:</span>
                        <span class="font-medium ml-1">{ strconv.Itoa(investigator.OccupationPoints) }</span>
                    </div>
                    <div class="bg-gray-100 px-4 py-2 rounded-md">
                        <span class="text-sm text-gray-600">Archetype Points:</span>
                        <span class="font-medium ml-1">{ strconv.Itoa(investigator.ArchetypePoints) }</span>
                    </div>
                    <div class="bg-gray-100 px-4 py-2 rounded-md">
                        <span class="text-sm text-gray-600">Free Points:</span>
                        <span class="font-medium ml-1">{ strconv.Itoa(investigator.FreePoints) }</span>
                    </div>
                </div>

                <div class="bg-gray-50 p-4 rounded-lg">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-6 gap-y-2">
                        for _, skill := range sortSkills(investigator.Skills) {
                            if skill.Name != "" && skill.Name != "Dodge_Copy"  && skill.Base == 0 {
                                <div class="flex justify-between items-center py-1 border-b border-gray-200 last:border-0">
                                    <input
                                        type="checkbox"
                                        class="w-4 h-4 text-blue-600 rounded border-gray-300 cursor-pointer mr-2"
                                        data-skill={ skill.Name }
                                        if skill.IsSelected {
                                                checked
                                            }
                                        onchange="characterUtils.handleSkillToggleCheck(this)"
                                    />
                                    <span
                                        class="font-medium text-gray-600 w-[40%] tooltip cursor-help"
                                        title={ "Default: " + strconv.Itoa(skill.Default) + " | Points Assigned: " + strconv.Itoa(skill.Value - skill.Default) }
                                    >{ skill.Name }</span>
                                    <div class="flex items-center w-[60%] justify-end">
                                        <input
                                            type="number"
                                            class="tooltip cursor-pointer w-[50px] text-right bg-white border rounded px-1"
                                            value={ strconv.Itoa(skill.Value) }
                                            data-skill={ skill.Name }
                                            onchange="characterUtils.recalculateValues(this, 'skill')"
                                            title="Regular"
                                            min="0"
                                        />
                                        <span class="text-gray-300 w-[20px] text-center">|</span>
                                        <span class="tooltip cursor-help w-[50px] text-right" title="Half value" data-half>{ strconv.Itoa(skill.Value/2) }</span>
                                        <span class="text-gray-300 w-[20px] text-center">|</span>
                                        <span class="tooltip cursor-help w-[50px] text-right" title="Fifth value" data-fifth>{ strconv.Itoa(skill.Value/5) }</span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <style>
        @media print {
            //.second-page {
              //  page-break-before: always;
            //}
            .second-page {
                        margin-top: 0 !important;
                        padding-top: 0 !important;
                    }

                    .second-page .grid {
                        gap: 0.25rem !important; // Tighter spacing for skills
                    }
            /* Rest of your print styles */
            #character-sheet {
                margin: 0;
                padding: 20px;
            }

            .tooltip::after {
                display: none !important;
            }

            * {
                -webkit-print-color-adjust: exact !important;
                print-color-adjust: exact !important;
            }
        }
        .tooltip {
            position: relative;
        }
        .tooltip:hover::after {
            content: attr(title);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            padding: 4px 8px;
            background: #1a202c;
            color: white;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            z-index: 10;
        }
    </style>
}


templ InvestigatorsList(investigators map[string]*models.Investigator) {
        <div class="mb-4 flex justify-end gap-2">
            <button
                onclick="document.getElementById('exportModal').classList.remove('hidden')"
                class="bg-purple-600 text-white px-3 py-1 rounded hover:bg-purple-700">Export</button>
            <button
                onclick="document.getElementById('importModal').classList.remove('hidden')"
                class="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700">Import</button>
        </div>

        // Export Modal
        <div id="exportModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3 text-center">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Export Investigators</h3>
                    <div class="mt-2 px-7 py-3">
                        <textarea id="exportCode" class="w-full h-32 p-2 border rounded" readonly
                            hx-get="/api/investigator/list/export"
                            hx-trigger="load"
                            hx-swap="innerHTML"></textarea>
                    </div>
                    <div class="flex justify-center gap-2">
                        <button
                            onclick="navigator.clipboard.writeText(document.getElementById('exportCode').value); document.getElementById('exportModal').classList.add('hidden')"
                            class="bg-blue-500 text-white px-4 py-2 rounded">Copy & Close</button>
                        <button
                            onclick="document.getElementById('exportModal').classList.add('hidden')"
                            class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
                    </div>
                </div>
            </div>
        </div>

        // Import Modal
    <div id="importModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3 text-center">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Import Investigators</h3>
                <div class="mt-2 px-7 py-3">
                    <textarea id="importCode" class="w-full h-32 p-2 border rounded" placeholder="Paste export code here"></textarea>
                </div>
                <div class="flex justify-center gap-2">
                    <button
                        onclick="characterUtils.importInvestigators(); document.getElementById('importModal').classList.add('hidden')"
                        class="bg-green-500 text-white px-4 py-2 rounded"
                        hx-swap="none">
                        Import
                    </button>
                    <button
                        onclick="document.getElementById('importModal').classList.add('hidden')"
                        class="bg-gray-500 text-white px-4 py-2 rounded">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    <div
        id="refresh-list"
        hx-get="/api/investigator/list"
        hx-trigger="import from:body"
        hx-target="#character-sheet"
        hx-swap="innerHTML"
    ></div>
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        for key, inv := range investigators {
            <div class="bg-white p-4 rounded-lg shadow">
                <h3 class="text-xl font-bold">{ inv.Name }</h3>
                <p class="text-gray-600">{ inv.Occupation.Name }</p>
                <div class="mt-4 flex gap-2">
                    <button
                        hx-get={fmt.Sprintf("/api/investigator/%s", key)}
                        hx-target="#character-sheet"
                        class="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700"
                    >
                        Load
                    </button>
                    <button
                        hx-delete={fmt.Sprintf("/api/investigator/delete/%s", key)}
                        hx-target="closest div"
                        class="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700"
                        hx-confirm="Are you sure?"
                    >
                        Delete
                    </button>
                    <div
                        hx-get="/api/investigator/list"
                        hx-trigger="deleted from:body"
                        hx-target="#character-sheet"
                    >
                    </div>
                    <button
                        hx-swap="none"
                        onclick={ templ.ComponentScript{
                            Name: "characterUtils.exportPDF",
                            Call: fmt.Sprintf("characterUtils.exportPDF(event, '%s')", key),
                        }}
                        class="bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700"
                    >
                        PDF
                    </button>

                </div>
            </div>
        }
    </div>

}



templ hidden(investigator *models.Investigator) {
    <input
        type="hidden"
        id="currentCharacter"
        value={ mustJson(investigator) }
    />
}

func mustJson(v interface{}) string {
    b, err := json.Marshal(v)
    if err != nil {
        return ""
    }
    return string(b)
}
type skillItem struct {
    Name  string
    Value int
}

func sortSkills(skills map[string]models.Skill) []models.Skill {
    // Create a slice to hold the skills
    var skillSlice []models.Skill

    // Convert map to slice
    for _, skill := range skills {
        if skill.Name != "" && skill.Name != "Dodge_Copy" {
            skillSlice = append(skillSlice, skill)
        }
    }

    // Sort the slice by name
    sort.Slice(skillSlice, func(i, j int) bool {
        return skillSlice[i].Name < skillSlice[j].Name
    })

    return skillSlice
}